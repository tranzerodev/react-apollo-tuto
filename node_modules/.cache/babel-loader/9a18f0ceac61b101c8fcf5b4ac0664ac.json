{"ast":null,"code":"import Observable from 'zen-observable';\nimport 'symbol-observable';\n\nfunction asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n        error = observer.error,\n        complete = observer.complete;\n    var activeCallbackCount = 0;\n    var completed = false;\n\n    function makeCallback(examiner, delegate) {\n      if (examiner) {\n        return function (arg) {\n          ++activeCallbackCount;\n          new Promise(function (resolve) {\n            return resolve(examiner(arg));\n          }).then(function (result) {\n            --activeCallbackCount;\n            next && next.call(observer, result);\n\n            if (completed) {\n              handler.complete();\n            }\n          }, function (e) {\n            --activeCallbackCount;\n            error && error.call(observer, e);\n          });\n        };\n      } else {\n        return function (arg) {\n          return delegate && delegate.call(observer, arg);\n        };\n      }\n    }\n\n    var handler = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete: function () {\n        completed = true;\n\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}\n\nexport { asyncMap };","map":{"version":3,"sources":["asyncMap.js"],"names":[],"mappings":";;;AACO,SAAS,QAAT,CAAkB,UAAlB,EAA8B,KAA9B,EAAqC,OAArC,EAA8C;AACjD,SAAO,IAAI,UAAJ,CAAe,UAAU,QAAV,EAAoB;AACtC,QAAI,IAAI,GAAG,QAAQ,CAAC,IAApB;AAAA,QAA0B,KAAK,GAAG,QAAQ,CAAC,KAA3C;AAAA,QAAkD,QAAQ,GAAG,QAAQ,CAAC,QAAtE;AACA,QAAI,mBAAmB,GAAG,CAA1B;AACA,QAAI,SAAS,GAAG,KAAhB;;AACA,aAAS,YAAT,CAAsB,QAAtB,EAAgC,QAAhC,EAA0C;AACtC,UAAI,QAAJ,EAAc;AACV,eAAO,UAAU,GAAV,EAAe;AAClB,YAAE,mBAAF;AACA,cAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB;AAAE,mBAAO,OAAO,CAAC,QAAQ,CAAC,GAAD,CAAT,CAAd;AAAgC,WAAjE,EAAmE,IAAnE,CAAwE,UAAU,MAAV,EAAkB;AACtF,cAAE,mBAAF;AACA,YAAA,IAAI,IAAI,IAAI,CAAC,IAAL,CAAU,QAAV,EAAoB,MAApB,CAAR;;AACA,gBAAI,SAAJ,EAAe;AACX,cAAA,OAAO,CAAC,QAAR;AACH;AACJ,WAND,EAMG,UAAU,CAAV,EAAa;AACZ,cAAE,mBAAF;AACA,YAAA,KAAK,IAAI,KAAK,CAAC,IAAN,CAAW,QAAX,EAAqB,CAArB,CAAT;AACH,WATD;AAUH,SAZD;AAaH,OAdD,MAeK;AACD,eAAO,UAAU,GAAV,EAAe;AAAE,iBAAO,QAAQ,IAAI,QAAQ,CAAC,IAAT,CAAc,QAAd,EAAwB,GAAxB,CAAnB;AAAkD,SAA1E;AACH;AACJ;;AACD,QAAI,OAAO,GAAG;AACV,MAAA,IAAI,EAAE,YAAY,CAAC,KAAD,EAAQ,IAAR,CADR;AAEV,MAAA,KAAK,EAAE,YAAY,CAAC,OAAD,EAAU,KAAV,CAFT;AAGV,MAAA,QAAQ,EAAE,YAAY;AAClB,QAAA,SAAS,GAAG,IAAZ;;AACA,YAAI,CAAC,mBAAL,EAA0B;AACtB,UAAA,QAAQ,IAAI,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAZ;AACH;AACJ;AARS,KAAd;AAUA,QAAI,GAAG,GAAG,UAAU,CAAC,SAAX,CAAqB,OAArB,CAAV;AACA,WAAO,YAAY;AAAE,aAAO,GAAG,CAAC,WAAJ,EAAP;AAA2B,KAAhD;AACH,GApCM,CAAP;AAqCJ","sourcesContent":["import { Observable } from \"./Observable\";\nexport function asyncMap(observable, mapFn, catchFn) {\n    return new Observable(function (observer) {\n        var next = observer.next, error = observer.error, complete = observer.complete;\n        var activeCallbackCount = 0;\n        var completed = false;\n        function makeCallback(examiner, delegate) {\n            if (examiner) {\n                return function (arg) {\n                    ++activeCallbackCount;\n                    new Promise(function (resolve) { return resolve(examiner(arg)); }).then(function (result) {\n                        --activeCallbackCount;\n                        next && next.call(observer, result);\n                        if (completed) {\n                            handler.complete();\n                        }\n                    }, function (e) {\n                        --activeCallbackCount;\n                        error && error.call(observer, e);\n                    });\n                };\n            }\n            else {\n                return function (arg) { return delegate && delegate.call(observer, arg); };\n            }\n        }\n        var handler = {\n            next: makeCallback(mapFn, next),\n            error: makeCallback(catchFn, error),\n            complete: function () {\n                completed = true;\n                if (!activeCallbackCount) {\n                    complete && complete.call(observer);\n                }\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n//# sourceMappingURL=asyncMap.js.map"]},"metadata":{},"sourceType":"module"}