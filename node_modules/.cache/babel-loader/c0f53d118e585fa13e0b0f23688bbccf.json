{"ast":null,"code":"import { __assign, __spreadArrays } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(41) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n    }\n\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  if (typeof actualFragmentName === 'undefined') {\n    process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 42) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArrays([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions)\n  });\n\n  return query;\n}\n\nfunction createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nfunction getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n\n    case 'FragmentSpread':\n      {\n        var fragment = fragmentMap && fragmentMap[selection.name.value];\n        process.env.NODE_ENV === \"production\" ? invariant(fragment, 43) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n        return fragment;\n      }\n\n    default:\n      return null;\n  }\n}\n\nexport { createFragmentMap, getFragmentFromSelection, getFragmentQueryDocument };","map":{"version":3,"sources":["fragments.js"],"names":[],"mappings":";;;AAEO,SAAS,wBAAT,CAAkC,QAAlC,EAA4C,YAA5C,EAA0D;AAC7D,MAAI,kBAAkB,GAAG,YAAzB;AACA,MAAI,SAAS,GAAG,EAAhB;AACA,EAAA,QAAQ,CAAC,WAAT,CAAqB,OAArB,CAA6B,UAAU,UAAV,EAAsB;AAC/C,QAAI,UAAU,CAAC,IAAX,KAAoB,qBAAxB,EAA+C;AAC3C,YAAM,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,IAAI,cAAJ,CAAmB,EAAnB,CAAxC,GAAiE,IAAI,cAAJ,CAAmB,aAAa,UAAU,CAAC,SAAxB,GAAoC,YAApC,IAAoD,UAAU,CAAC,IAAX,GAAkB,aAAa,UAAU,CAAC,IAAX,CAAgB,KAA7B,GAAqC,GAAvD,GAA6D,EAAjH,IAAuH,IAAvH,GACtF,yFADmE,CAAvE;AAEH;;AACD,QAAI,UAAU,CAAC,IAAX,KAAoB,oBAAxB,EAA8C;AAC1C,MAAA,SAAS,CAAC,IAAV,CAAe,UAAf;AACH;AACJ,GARD;;AASA,MAAI,OAAO,kBAAP,KAA8B,WAAlC,EAA+C;AAC3C,IAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,SAAS,CAAC,MAAV,KAAqB,CAAtB,EAAyB,EAAzB,CAAjD,GAAgF,SAAS,CAAC,SAAS,CAAC,MAAV,KAAqB,CAAtB,EAAyB,WAAW,SAAS,CAAC,MAArB,GAA8B,mFAAvD,CAAzF;AACA,IAAA,kBAAkB,GAAG,SAAS,CAAC,CAAD,CAAT,CAAa,IAAb,CAAkB,KAAvC;AACH;;AACD,MAAI,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,QAAL,CAAT,EAAyB;AAAE,IAAA,WAAW,EAAE,cAAc,CAAC,CACnE;AACI,MAAA,IAAI,EAAE,qBADV;AAEI,MAAA,SAAS,EAAE,OAFf;AAGI,MAAA,YAAY,EAAE;AACV,QAAA,IAAI,EAAE,cADI;AAEV,QAAA,UAAU,EAAE,CACR;AACI,UAAA,IAAI,EAAE,gBADV;AAEI,UAAA,IAAI,EAAE;AACF,YAAA,IAAI,EAAE,MADJ;AAEF,YAAA,KAAK,EAAE;AAFL;AAFV,SADQ;AAFF;AAHlB,KADmE,CAAD,EAiBnE,QAAQ,CAAC,WAjB0D;AAA7B,GAAzB,CAApB;;AAkBA,SAAO,KAAP;AACH;;AACM,SAAS,iBAAT,CAA2B,SAA3B,EAAsC;AACzC,MAAI,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAE,IAAA,SAAS,GAAG,EAAZ;AAAiB;;AAC7C,MAAI,QAAQ,GAAG,EAAf;AACA,EAAA,SAAS,CAAC,OAAV,CAAkB,UAAU,QAAV,EAAoB;AAClC,IAAA,QAAQ,CAAC,QAAQ,CAAC,IAAT,CAAc,KAAf,CAAR,GAAgC,QAAhC;AACH,GAFD;AAGA,SAAO,QAAP;AACH;;AACM,SAAS,wBAAT,CAAkC,SAAlC,EAA6C,WAA7C,EAA0D;AAC7D,UAAQ,SAAS,CAAC,IAAlB;AACI,SAAK,gBAAL;AACI,aAAO,SAAP;;AACJ,SAAK,gBAAL;AAAuB;AACnB,YAAI,QAAQ,GAAG,WAAW,IAAI,WAAW,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,CAAzC;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,QAAD,EAAW,EAAX,CAAjD,GAAkE,SAAS,CAAC,QAAD,EAAW,uBAAuB,SAAS,CAAC,IAAV,CAAe,KAAtC,GAA8C,GAAzD,CAA3E;AACA,eAAO,QAAP;AACH;;AACD;AACI,aAAO,IAAP;AATR;AAWJ","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign(__assign({}, document), { definitions: __spreadArrays([\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions) });\n    return query;\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case 'InlineFragment':\n            return selection;\n        case 'FragmentSpread': {\n            var fragment = fragmentMap && fragmentMap[selection.name.value];\n            invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n            return fragment;\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=fragments.js.map"]},"metadata":{},"sourceType":"module"}