{"ast":null,"code":"import { serializeFetchParameter } from './serializeFetchParameter.js';\n\nfunction rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n\n  var addQueryParam = function (key, value) {\n    queryParams.push(key + \"=\" + encodeURIComponent(value));\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n\n  if (body.variables) {\n    var serializedVariables = void 0;\n\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('variables', serializedVariables);\n  }\n\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  var fragment = '',\n      preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}\n\nexport { rewriteURIForGET };","map":{"version":3,"sources":["rewriteURIForGET.js"],"names":[],"mappings":";;AACO,SAAS,gBAAT,CAA0B,SAA1B,EAAqC,IAArC,EAA2C;AAC9C,MAAI,WAAW,GAAG,EAAlB;;AACA,MAAI,aAAa,GAAG,UAAU,GAAV,EAAe,KAAf,EAAsB;AACtC,IAAA,WAAW,CAAC,IAAZ,CAAiB,GAAG,GAAG,GAAN,GAAY,kBAAkB,CAAC,KAAD,CAA/C;AACH,GAFD;;AAGA,MAAI,WAAW,IAAf,EAAqB;AACjB,IAAA,aAAa,CAAC,OAAD,EAAU,IAAI,CAAC,KAAf,CAAb;AACH;;AACD,MAAI,IAAI,CAAC,aAAT,EAAwB;AACpB,IAAA,aAAa,CAAC,eAAD,EAAkB,IAAI,CAAC,aAAvB,CAAb;AACH;;AACD,MAAI,IAAI,CAAC,SAAT,EAAoB;AAChB,QAAI,mBAAmB,GAAG,KAAK,CAA/B;;AACA,QAAI;AACA,MAAA,mBAAmB,GAAG,uBAAuB,CAAC,IAAI,CAAC,SAAN,EAAiB,eAAjB,CAA7C;AACH,KAFD,CAGA,OAAO,UAAP,EAAmB;AACf,aAAO;AAAE,QAAA,UAAU,EAAE;AAAd,OAAP;AACH;;AACD,IAAA,aAAa,CAAC,WAAD,EAAc,mBAAd,CAAb;AACH;;AACD,MAAI,IAAI,CAAC,UAAT,EAAqB;AACjB,QAAI,oBAAoB,GAAG,KAAK,CAAhC;;AACA,QAAI;AACA,MAAA,oBAAoB,GAAG,uBAAuB,CAAC,IAAI,CAAC,UAAN,EAAkB,gBAAlB,CAA9C;AACH,KAFD,CAGA,OAAO,UAAP,EAAmB;AACf,aAAO;AAAE,QAAA,UAAU,EAAE;AAAd,OAAP;AACH;;AACD,IAAA,aAAa,CAAC,YAAD,EAAe,oBAAf,CAAb;AACH;;AACD,MAAI,QAAQ,GAAG,EAAf;AAAA,MAAmB,WAAW,GAAG,SAAjC;AACA,MAAI,aAAa,GAAG,SAAS,CAAC,OAAV,CAAkB,GAAlB,CAApB;;AACA,MAAI,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACtB,IAAA,QAAQ,GAAG,SAAS,CAAC,MAAV,CAAiB,aAAjB,CAAX;AACA,IAAA,WAAW,GAAG,SAAS,CAAC,MAAV,CAAiB,CAAjB,EAAoB,aAApB,CAAd;AACH;;AACD,MAAI,iBAAiB,GAAG,WAAW,CAAC,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAA9B,GAAkC,GAAlC,GAAwC,GAAhE;AACA,MAAI,MAAM,GAAG,WAAW,GAAG,iBAAd,GAAkC,WAAW,CAAC,IAAZ,CAAiB,GAAjB,CAAlC,GAA0D,QAAvE;AACA,SAAO;AAAE,IAAA,MAAM,EAAE;AAAV,GAAP;AACJ","sourcesContent":["import { serializeFetchParameter } from './serializeFetchParameter';\nexport function rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\n//# sourceMappingURL=rewriteURIForGET.js.map"]},"metadata":{},"sourceType":"module"}