{"ast":null,"code":"import { __assign, __spreadArrays } from 'tslib';\nimport { invariant } from 'ts-invariant';\nimport { createFragmentMap } from './fragments.js';\nimport { isField, isInlineFragment } from './storeUtils.js';\nimport { checkDocument, getFragmentDefinitions, getOperationDefinition, getFragmentDefinition, getMainDefinition } from './getFromAST.js';\nimport { visit } from 'graphql/language/visitor';\nimport { filterInPlace } from '../common/filterInPlace.js';\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\n\nfunction isEmpty(op, fragments) {\n  return op.selectionSet.selections.every(function (selection) {\n    return selection.kind === 'FragmentSpread' && isEmpty(fragments[selection.name.value], fragments);\n  });\n}\n\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\n\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);\n    });\n  };\n}\n\nfunction removeDirectivesFromDocument(directives, doc) {\n  var variablesInUse = Object.create(null);\n  var variablesToRemove = [];\n  var fragmentSpreadsInUse = Object.create(null);\n  var fragmentSpreadsToRemove = [];\n  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n    Variable: {\n      enter: function (node, _key, parent) {\n        if (parent.kind !== 'VariableDefinition') {\n          variablesInUse[node.name.value] = true;\n        }\n      }\n    },\n    Field: {\n      enter: function (node) {\n        if (directives && node.directives) {\n          var shouldRemoveField = directives.some(function (directive) {\n            return directive.remove;\n          });\n\n          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {\n            if (node.arguments) {\n              node.arguments.forEach(function (arg) {\n                if (arg.value.kind === 'Variable') {\n                  variablesToRemove.push({\n                    name: arg.value.name.value\n                  });\n                }\n              });\n            }\n\n            if (node.selectionSet) {\n              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                fragmentSpreadsToRemove.push({\n                  name: frag.name.value\n                });\n              });\n            }\n\n            return null;\n          }\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node) {\n        fragmentSpreadsInUse[node.name.value] = true;\n      }\n    },\n    Directive: {\n      enter: function (node) {\n        if (getDirectiveMatcher(directives)(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n\n  if (modifiedDoc && filterInPlace(variablesToRemove, function (v) {\n    return !!v.name && !variablesInUse[v.name];\n  }).length) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function (fs) {\n    return !!fs.name && !fragmentSpreadsInUse[fs.name];\n  }).length) {\n    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n  }\n\n  return modifiedDoc;\n}\n\nfunction addTypenameToDocument(doc) {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        if (parent && parent.kind === 'OperationDefinition') {\n          return;\n        }\n\n        var selections = node.selections;\n\n        if (!selections) {\n          return;\n        }\n\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);\n        });\n\n        if (skip) {\n          return;\n        }\n\n        var field = parent;\n\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === 'export';\n        })) {\n          return;\n        }\n\n        return __assign(__assign({}, node), {\n          selections: __spreadArrays(selections, [TYPENAME_FIELD])\n        });\n      }\n    }\n  });\n}\n\naddTypenameToDocument.added = function (field) {\n  return field === TYPENAME_FIELD;\n};\n\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n\n    return willRemove;\n  }\n};\n\nfunction removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\n\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\n\nfunction removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          }) : []\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n\n          if (node.arguments) {\n            node.arguments.forEach(function (arg) {\n              if (argMatcher(arg)) {\n                argMatchCount_1 += 1;\n              }\n            });\n          }\n\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\n\nfunction removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n  var allFragments = [];\n  selectionSet.selections.forEach(function (selection) {\n    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {\n        return allFragments.push(frag);\n      });\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n  return allFragments;\n}\n\nfunction buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n\n  if (definitionOperation === 'query') {\n    return document;\n  }\n\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: 'query'\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\n\nfunction removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === 'client';\n    },\n    remove: true\n  }], document);\n\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter: function (node) {\n          if (node.selectionSet) {\n            var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n              return isField(selection) && selection.name.value === '__typename';\n            });\n\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  return modifiedDoc;\n}\n\nexport { addTypenameToDocument, buildQueryFromSelectionSet, removeArgumentsFromDocument, removeClientSetsFromDocument, removeConnectionDirectiveFromDocument, removeDirectivesFromDocument, removeFragmentSpreadFromDocument };","map":{"version":3,"sources":["transform.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport { visit } from 'graphql/language/visitor';\nimport { invariant } from 'ts-invariant';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition, } from './getFromAST';\nimport { filterInPlace } from '../common/filterInPlace';\nimport { isField, isInlineFragment } from './storeUtils';\nimport { createFragmentMap, } from './fragments';\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !!v.name && !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !!fs.name && !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nexport function addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign(__assign({}, node), { selections: __spreadArrays(selections, [TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\naddTypenameToDocument.added = function (field) {\n    return field === TYPENAME_FIELD;\n};\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (!!selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) : [] });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function (arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((isField(selection) || isInlineFragment(selection)) &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nexport function buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return isField(selection) && selection.name.value === '__typename';\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n//# sourceMappingURL=transform.js.map"]},"metadata":{},"sourceType":"module"}