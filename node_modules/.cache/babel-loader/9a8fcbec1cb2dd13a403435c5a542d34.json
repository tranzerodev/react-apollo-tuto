{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { parser, operationName } from '../parser/parser.js';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 44) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 45) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nexport { OperationData };","map":{"version":3,"sources":["OperationData.js"],"names":[],"mappings":";;;;AAGG,IAAC,aAAa,GAAI,YAAY;AAC7B,WAAS,aAAT,CAAuB,OAAvB,EAAgC,OAAhC,EAAyC;AACrC,SAAK,SAAL,GAAiB,KAAjB;AACA,SAAK,eAAL,GAAuB,EAAvB;AACA,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,OAAL,GAAe,OAAO,IAAI,EAA1B;AACA,SAAK,OAAL,GAAe,OAAO,IAAI,EAA1B;AACH;;AACD,EAAA,aAAa,CAAC,SAAd,CAAwB,UAAxB,GAAqC,YAAY;AAC7C,WAAO,KAAK,OAAZ;AACH,GAFD;;AAGA,EAAA,aAAa,CAAC,SAAd,CAAwB,UAAxB,GAAqC,UAAU,UAAV,EAAsB,aAAtB,EAAqC;AACtE,QAAI,aAAa,KAAK,KAAK,CAA3B,EAA8B;AAAE,MAAA,aAAa,GAAG,KAAhB;AAAwB;;AACxD,QAAI,aAAa,IAAI,CAAC,KAAK,CAAC,KAAK,OAAN,EAAe,UAAf,CAA3B,EAAuD;AACnD,WAAK,eAAL,GAAuB,KAAK,OAA5B;AACH;;AACD,SAAK,OAAL,GAAe,UAAf;AACH,GAND;;AAOA,EAAA,aAAa,CAAC,SAAd,CAAwB,OAAxB,GAAkC,YAAY;AAC1C,SAAK,SAAL,GAAiB,KAAjB;AACH,GAFD;;AAGA,EAAA,aAAa,CAAC,SAAd,CAAwB,aAAxB,GAAwC,YAAY;AAChD,QAAI,MAAM,GAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAA9B,IACR,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MADlC;AAEA,IAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,CAAC,CAAC,MAAH,EAAW,EAAX,CAAjD,GAAkE,SAAS,CAAC,CAAC,CAAC,MAAH,EAAW,uEAClF,6DADkF,GAElF,uCAFuE,CAA3E;AAGA,QAAI,KAAK,GAAG,KAAZ;;AACA,QAAI,MAAM,KAAK,KAAK,MAApB,EAA4B;AACxB,MAAA,KAAK,GAAG,IAAR;AACA,WAAK,MAAL,GAAc,MAAd;AACA,WAAK,OAAL;AACH;;AACD,WAAO;AACH,MAAA,MAAM,EAAE,KAAK,MADV;AAEH,MAAA,KAAK,EAAE;AAFJ,KAAP;AAIH,GAhBD;;AAiBA,EAAA,aAAa,CAAC,SAAd,CAAwB,kBAAxB,GAA6C,UAAU,QAAV,EAAoB,IAApB,EAA0B;AACnE,QAAI,SAAS,GAAG,MAAM,CAAC,QAAD,CAAtB;AACA,QAAI,qBAAqB,GAAG,aAAa,CAAC,IAAD,CAAzC;AACA,QAAI,iBAAiB,GAAG,aAAa,CAAC,SAAS,CAAC,IAAX,CAArC;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GAAwC,SAAS,CAAC,SAAS,CAAC,IAAV,KAAmB,IAApB,EAA0B,EAA1B,CAAjD,GAAiF,SAAS,CAAC,SAAS,CAAC,IAAV,KAAmB,IAApB,EAA0B,eAAe,qBAAf,GAAuC,sBAAvC,IAC/G,qBAAqB,GAAG,UAAxB,GAAqC,iBAArC,GAAyD,oBADsD,CAA1B,CAA1F;AAEH,GAND;;AAOA,SAAO,aAAP;AACH,CA/CoB,EAAlB","sourcesContent":["import { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport { parser, operationName } from '../parser/parser';\nvar OperationData = (function () {\n    function OperationData(options, context) {\n        this.isMounted = false;\n        this.previousOptions = {};\n        this.context = {};\n        this.options = {};\n        this.options = options || {};\n        this.context = context || {};\n    }\n    OperationData.prototype.getOptions = function () {\n        return this.options;\n    };\n    OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n        if (storePrevious === void 0) { storePrevious = false; }\n        if (storePrevious && !equal(this.options, newOptions)) {\n            this.previousOptions = this.options;\n        }\n        this.options = newOptions;\n    };\n    OperationData.prototype.unmount = function () {\n        this.isMounted = false;\n    };\n    OperationData.prototype.refreshClient = function () {\n        var client = (this.options && this.options.client) ||\n            (this.context && this.context.client);\n        invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n            'Wrap the root component in an <ApolloProvider>, or pass an ' +\n            'ApolloClient instance in via options.');\n        var isNew = false;\n        if (client !== this.client) {\n            isNew = true;\n            this.client = client;\n            this.cleanup();\n        }\n        return {\n            client: this.client,\n            isNew: isNew\n        };\n    };\n    OperationData.prototype.verifyDocumentType = function (document, type) {\n        var operation = parser(document);\n        var requiredOperationName = operationName(type);\n        var usedOperationName = operationName(operation.type);\n        invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" +\n            (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n    };\n    return OperationData;\n}());\nexport { OperationData };\n//# sourceMappingURL=OperationData.js.map"]},"metadata":{},"sourceType":"module"}