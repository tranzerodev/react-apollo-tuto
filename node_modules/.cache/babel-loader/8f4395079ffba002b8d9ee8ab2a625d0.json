{"ast":null,"code":"import { InvariantError } from 'ts-invariant';\nimport stringify from 'fast-json-stable-stringify';\nimport { getFragmentFromSelection } from './fragments.js';\n\nfunction makeReference(id) {\n  return {\n    __ref: String(id)\n  };\n}\n\nfunction isReference(obj) {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\n\nfunction isStringValue(value) {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value) {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value) {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value) {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value) {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value) {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value) {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value) {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value) {\n  return value.kind === 'NullValue';\n}\n\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(33) : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.');\n  }\n}\n\nfunction storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n              value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n\n  var argObj = null;\n\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nvar KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];\n\nfunction getStoreKeyName(fieldName, args, directives) {\n  if (args && directives && directives['connection'] && directives['connection']['key']) {\n    if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {\n      var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];\n      filterKeys.sort();\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = args[key];\n      });\n      return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  var completeFieldName = fieldName;\n\n  if (args) {\n    var stringifiedArgs = stringify(args);\n    completeFieldName += \"(\" + stringifiedArgs + \")\";\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n      } else {\n        completeFieldName += \"@\" + key;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\n\nfunction argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n\n  return null;\n}\n\nfunction resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nfunction getTypenameFromResult(result, selectionSet, fragmentMap) {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n    var selection = _a[_i];\n\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\n\nfunction isField(selection) {\n  return selection.kind === 'Field';\n}\n\nfunction isInlineFragment(selection) {\n  return selection.kind === 'InlineFragment';\n}\n\nexport { argumentsObjectFromField, getStoreKeyName, getTypenameFromResult, isField, isInlineFragment, isReference, makeReference, resultKeyNameFromField, storeKeyNameFromField, valueToObjectRepresentation };","map":{"version":3,"sources":["storeUtils.js"],"names":[],"mappings":"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","sourcesContent":["import stringify from 'fast-json-stable-stringify';\nimport { InvariantError } from 'ts-invariant';\nimport { getFragmentFromSelection } from './fragments';\nexport function makeReference(id) {\n    return { __ref: String(id) };\n}\nexport function isReference(obj) {\n    return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nexport function storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nexport function getStoreKeyName(fieldName, args, directives) {\n    if (args &&\n        directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = args[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nexport function argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nexport function resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n    if (typeof result.__typename === 'string') {\n        return result.__typename;\n    }\n    for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n        var selection = _a[_i];\n        if (isField(selection)) {\n            if (selection.name.value === '__typename') {\n                return result[resultKeyNameFromField(selection)];\n            }\n        }\n        else {\n            var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n            if (typeof typename === 'string') {\n                return typename;\n            }\n        }\n    }\n}\nexport function isField(selection) {\n    return selection.kind === 'Field';\n}\nexport function isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\n//# sourceMappingURL=storeUtils.js.map"]},"metadata":{},"sourceType":"module"}