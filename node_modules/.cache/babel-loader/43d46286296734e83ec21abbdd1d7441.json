{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { getOperationDefinition } from '../utilities/graphql/getFromAST.js';\nimport { equal } from '@wry/equality';\nimport { tryFunctionOrLogError } from '../utilities/common/errorHandling.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { ApolloError } from '../errors/ApolloError.js';\nimport { cloneDeep } from '../utilities/common/cloneDeep.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { iterateObserversSafely } from '../utilities/observables/iteration.js';\nimport { Reobserver } from './Reobserver.js';\n\nvar hasError = function (storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n\n  return storeValue && (storeValue.networkError || policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors));\n};\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        options = _a.options;\n\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.observer = {\n      next: function (result) {\n        if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n          _this.updateLastResult(result);\n\n          iterateObserversSafely(_this.observers, 'next', result);\n        }\n      },\n      error: function (error) {\n        _this.updateLastResult(__assign(__assign({}, _this.lastResult), {\n          errors: error.graphQLErrors,\n          networkStatus: NetworkStatus.error,\n          loading: false\n        }));\n\n        iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n      }\n    };\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.queryId = queryManager.generateQueryId();\n    var opDef = getOperationDefinition(options.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    _this.queryManager = queryManager;\n    return _this;\n  }\n\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n\n          _this.observers.delete(observer);\n\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n\n      var subscription = _this.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function () {\n    var _a = this,\n        lastResult = _a.lastResult,\n        lastError = _a.lastError,\n        fetchPolicy = _a.options.fetchPolicy;\n\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n    var networkStatus = lastError ? NetworkStatus.error : lastResult ? lastResult.networkStatus : isNetworkFetchPolicy ? NetworkStatus.loading : NetworkStatus.ready;\n    var result = {\n      data: !lastError && lastResult && lastResult.data || void 0,\n      error: lastError,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    };\n\n    if (this.isTornDown) {\n      return result;\n    }\n\n    var _b = this.getCurrentQueryResult(),\n        data = _b.data,\n        partial = _b.partial;\n\n    Object.assign(result, {\n      data: data,\n      partial: partial\n    });\n    var queryStoreValue = this.queryManager.getQueryStoreValue(this.queryId);\n\n    if (queryStoreValue) {\n      var networkStatus_1 = queryStoreValue.networkStatus;\n\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return Object.assign(result, {\n          data: void 0,\n          networkStatus: networkStatus_1,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          })\n        });\n      }\n\n      if (queryStoreValue.variables) {\n        this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n      }\n\n      Object.assign(result, {\n        loading: isNetworkRequestInFlight(networkStatus_1),\n        networkStatus: networkStatus_1\n      });\n\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n    }\n\n    if (partial) {\n      this.resetLastResults();\n    } else {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    return !equal(this.lastResultSnapshot, newResult);\n  };\n\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    var queryStore = this.queryManager.getQueryStoreValue(this.queryId);\n\n    if (queryStore) {\n      queryStore.networkError = undefined;\n      queryStore.graphQLErrors = [];\n    }\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n\n    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n\n    return this.newReobserver(false).reobserve({\n      fetchPolicy: fetchPolicy,\n      variables: this.options.variables,\n      pollInterval: 0\n    }, NetworkStatus.refetch);\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n\n    var qid = this.queryManager.generateQueryId();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        var data = fetchMoreResult.data;\n        var updateQuery = fetchMoreOptions.updateQuery;\n        return updateQuery ? updateQuery(previousResult, {\n          fetchMoreResult: data,\n          variables: combinedOptions.variables\n        }) : data;\n      });\n\n      return fetchMoreResult;\n    }).finally(function () {\n      _this.queryManager.stopQuery(qid);\n\n      _this.reobserve();\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy !== 'cache-first' && fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n      fetchPolicy = 'cache-and-network';\n    }\n\n    return this.reobserve({\n      fetchPolicy: fetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var _this = this;\n\n    var queryManager = this.queryManager;\n    var previousResult = this.getCurrentQueryResult(false).data;\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: _this.variables\n      });\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.getCurrentQueryResult = function (optimistic) {\n    var _a, _b;\n\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return {\n        data: (_a = this.lastResult) === null || _a === void 0 ? void 0 : _a.data,\n        partial: false\n      };\n    }\n\n    var _c = this.queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      previousResult: (_b = this.lastResult) === null || _b === void 0 ? void 0 : _b.data,\n      returnPartialData: true,\n      optimistic: optimistic\n    }),\n        result = _c.result,\n        complete = _c.complete;\n\n    return {\n      data: complete || this.options.returnPartialData ? result : void 0,\n      partial: !complete\n    };\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.getReobserver().updateOptions({\n      pollInterval: pollInterval\n    });\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    if (this.reobserver) {\n      this.reobserver.updateOptions({\n        pollInterval: 0\n      });\n    }\n  };\n\n  ObservableQuery.prototype.updateLastResult = function (newResult) {\n    var previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);\n\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.lastError;\n    }\n\n    return previousResult;\n  };\n\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n\n    if (observer === this.observer) {\n      return function () {};\n    }\n\n    try {\n      var subObserver = observer._subscription._observer;\n\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch (_a) {}\n\n    var first = !this.observers.size;\n    this.observers.add(observer);\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n\n    if (first) {\n      this.reobserve().catch(function (_) {});\n    }\n\n    return function () {\n      if (_this.observers.delete(observer) && !_this.observers.size) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.getReobserver = function () {\n    return this.reobserver || (this.reobserver = this.newReobserver(true));\n  };\n\n  ObservableQuery.prototype.newReobserver = function (shareOptions) {\n    var _this = this;\n\n    var _a = this,\n        queryManager = _a.queryManager,\n        queryId = _a.queryId;\n\n    queryManager.setObservableQuery(this);\n    return new Reobserver(this.observer, shareOptions ? this.options : __assign({}, this.options), function (currentOptions, newNetworkStatus) {\n      queryManager.setObservableQuery(_this);\n      return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);\n    }, !queryManager.ssrMode && function () {\n      return !queryManager.checkInFlight(queryId);\n    });\n  };\n\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    this.isTornDown = false;\n    return this.getReobserver().reobserve(newOptions, newNetworkStatus);\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    var queryManager = this.queryManager;\n\n    if (this.reobserver) {\n      this.reobserver.stop();\n      delete this.reobserver;\n    }\n\n    this.isTornDown = true;\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport { ObservableQuery, hasError };","map":{"version":3,"sources":["ObservableQuery.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { tryFunctionOrLogError } from '../utilities/common/errorHandling';\nimport { cloneDeep } from '../utilities/common/cloneDeep';\nimport { getOperationDefinition } from '../utilities/graphql/getFromAST';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable } from '../utilities/observables/Observable';\nimport { iterateObserversSafely } from '../utilities/observables/iteration';\nimport { ApolloError } from '../errors/ApolloError';\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nimport { Reobserver } from './Reobserver';\nexport var hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue && (storeValue.networkError ||\n        (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors)));\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.observer = {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    _this.updateLastResult(result);\n                    iterateObserversSafely(_this.observers, 'next', result);\n                }\n            },\n            error: function (error) {\n                _this.updateLastResult(__assign(__assign({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));\n                iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n            },\n        };\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.queryId = queryManager.generateQueryId();\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        var _a = this, lastResult = _a.lastResult, lastError = _a.lastError, fetchPolicy = _a.options.fetchPolicy;\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache';\n        var networkStatus = lastError ? NetworkStatus.error :\n            lastResult ? lastResult.networkStatus :\n                isNetworkFetchPolicy ? NetworkStatus.loading :\n                    NetworkStatus.ready;\n        var result = {\n            data: !lastError && lastResult && lastResult.data || void 0,\n            error: lastError,\n            loading: isNetworkRequestInFlight(networkStatus),\n            networkStatus: networkStatus,\n        };\n        if (this.isTornDown) {\n            return result;\n        }\n        var _b = this.getCurrentQueryResult(), data = _b.data, partial = _b.partial;\n        Object.assign(result, { data: data, partial: partial });\n        var queryStoreValue = this.queryManager.getQueryStoreValue(this.queryId);\n        if (queryStoreValue) {\n            var networkStatus_1 = queryStoreValue.networkStatus;\n            if (hasError(queryStoreValue, this.options.errorPolicy)) {\n                return Object.assign(result, {\n                    data: void 0,\n                    networkStatus: networkStatus_1,\n                    error: new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    }),\n                });\n            }\n            if (queryStoreValue.variables) {\n                this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n            }\n            Object.assign(result, {\n                loading: isNetworkRequestInFlight(networkStatus_1),\n                networkStatus: networkStatus_1,\n            });\n            if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n                result.errors = queryStoreValue.graphQLErrors;\n            }\n        }\n        if (partial) {\n            this.resetLastResults();\n        }\n        else {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        return !equal(this.lastResultSnapshot, newResult);\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        var queryStore = this.queryManager.getQueryStoreValue(this.queryId);\n        if (queryStore) {\n            queryStore.networkError = undefined;\n            queryStore.graphQLErrors = [];\n        }\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            fetchPolicy = 'network-only';\n        }\n        if (variables && !equal(this.options.variables, variables)) {\n            this.options.variables = __assign(__assign({}, this.options.variables), variables);\n        }\n        return this.newReobserver(false).reobserve({\n            fetchPolicy: fetchPolicy,\n            variables: this.options.variables,\n            pollInterval: 0,\n        }, NetworkStatus.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) }))), { fetchPolicy: \"no-cache\" });\n        var qid = this.queryManager.generateQueryId();\n        return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                var data = fetchMoreResult.data;\n                var updateQuery = fetchMoreOptions.updateQuery;\n                return updateQuery ? updateQuery(previousResult, {\n                    fetchMoreResult: data,\n                    variables: combinedOptions.variables,\n                }) : data;\n            });\n            return fetchMoreResult;\n        }).finally(function () {\n            _this.queryManager.stopQuery(qid);\n            _this.reobserve();\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal(this.variables, variables)) {\n            return this.observers.size\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy !== 'cache-first' &&\n            fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'network-only') {\n            fetchPolicy = 'cache-and-network';\n        }\n        return this.reobserve({\n            fetchPolicy: fetchPolicy,\n            variables: variables,\n        }, NetworkStatus.setVariables);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _this = this;\n        var queryManager = this.queryManager;\n        var previousResult = this.getCurrentQueryResult(false).data;\n        var newResult = tryFunctionOrLogError(function () { return mapFn(previousResult, {\n            variables: _this.variables,\n        }); });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.getCurrentQueryResult = function (optimistic) {\n        var _a, _b;\n        if (optimistic === void 0) { optimistic = true; }\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'no-cache' ||\n            fetchPolicy === 'network-only') {\n            return {\n                data: (_a = this.lastResult) === null || _a === void 0 ? void 0 : _a.data,\n                partial: false,\n            };\n        }\n        var _c = this.queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            previousResult: (_b = this.lastResult) === null || _b === void 0 ? void 0 : _b.data,\n            returnPartialData: true,\n            optimistic: optimistic,\n        }), result = _c.result, complete = _c.complete;\n        return {\n            data: (complete || this.options.returnPartialData) ? result : void 0,\n            partial: !complete,\n        };\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.getReobserver().updateOptions({ pollInterval: pollInterval });\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        if (this.reobserver) {\n            this.reobserver.updateOptions({ pollInterval: 0 });\n        }\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        if (!isNonEmptyArray(newResult.errors)) {\n            delete this.lastError;\n        }\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer === this.observer) {\n            return function () { };\n        }\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (first) {\n            this.reobserve().catch(function (_) {\n            });\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.getReobserver = function () {\n        return this.reobserver || (this.reobserver = this.newReobserver(true));\n    };\n    ObservableQuery.prototype.newReobserver = function (shareOptions) {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        queryManager.setObservableQuery(this);\n        return new Reobserver(this.observer, shareOptions ? this.options : __assign({}, this.options), function (currentOptions, newNetworkStatus) {\n            queryManager.setObservableQuery(_this);\n            return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);\n        }, !queryManager.ssrMode && (function () { return !queryManager.checkInFlight(queryId); }));\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        this.isTornDown = false;\n        return this.getReobserver().reobserve(newOptions, newNetworkStatus);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        if (this.reobserver) {\n            this.reobserver.stop();\n            delete this.reobserver;\n        }\n        this.isTornDown = true;\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    invariant.error('Unhandled error', error.message, error.stack);\n}\n//# sourceMappingURL=ObservableQuery.js.map"]},"metadata":{},"sourceType":"module"}