{"ast":null,"code":"import { invariant, InvariantError } from 'ts-invariant';\nimport { valueToObjectRepresentation } from './storeUtils.js';\n\nfunction checkDocument(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 24) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(25) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n    }\n\n    return definition;\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 26) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n  return doc;\n}\n\nfunction getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\n\nfunction getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\n\nfunction getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\n\nfunction getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 27) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n  return queryDef;\n}\n\nfunction getFragmentDefinition(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 28) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 29) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n  var fragmentDef = doc.definitions[0];\n  process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 30) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n  return fragmentDef;\n}\n\nfunction getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw process.env.NODE_ENV === \"production\" ? new InvariantError(31) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\n\nfunction getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n\n  return defaultValues;\n}\n\nexport { checkDocument, getDefaultValues, getFragmentDefinition, getFragmentDefinitions, getMainDefinition, getOperationDefinition, getOperationName, getQueryDefinition };","map":{"version":3,"sources":["getFromAST.js"],"names":[],"mappings":"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","sourcesContent":["import { invariant, InvariantError } from 'ts-invariant';\nimport { valueToObjectRepresentation } from './storeUtils';\nexport function checkDocument(doc) {\n    invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nexport function getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function (def) {\n            if (def.defaultValue) {\n                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n}\n//# sourceMappingURL=getFromAST.js.map"]},"metadata":{},"sourceType":"module"}