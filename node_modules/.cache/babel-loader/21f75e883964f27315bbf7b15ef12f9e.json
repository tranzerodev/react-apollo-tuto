{"ast":null,"code":"import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nvar fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\n\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = __assign(__assign({}, fallbackConfig.options), {\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials\n  });\n\n  var http = fallbackConfig.http || {};\n  configs.forEach(function (config) {\n    options = __assign(__assign(__assign({}, options), config.options), {\n      headers: __assign(__assign({}, options.headers), config.headers)\n    });\n    if (config.credentials) options.credentials = config.credentials;\n    http = __assign(__assign({}, http), config.http);\n  });\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = print(query);\n  return {\n    options: options,\n    body: body\n  };\n};\n\nexport { fallbackHttpConfig, selectHttpOptionsAndBody };","map":{"version":3,"sources":["selectHttpOptionsAndBody.js"],"names":[],"mappings":";;AAEA,IAAI,kBAAkB,GAAG;AACrB,EAAA,YAAY,EAAE,IADO;AAErB,EAAA,iBAAiB,EAAE;AAFE,CAAzB;AAIA,IAAI,cAAc,GAAG;AACjB,EAAA,MAAM,EAAE,KADS;AAEjB,kBAAgB;AAFC,CAArB;AAIA,IAAI,cAAc,GAAG;AACjB,EAAA,MAAM,EAAE;AADS,CAArB;AAGU,IAAC,kBAAkB,GAAG;AAC5B,EAAA,IAAI,EAAE,kBADsB;AAE5B,EAAA,OAAO,EAAE,cAFmB;AAG5B,EAAA,OAAO,EAAE;AAHmB,CAAtB;;AAKA,IAAC,wBAAwB,GAAG,UAAU,SAAV,EAAqB,cAArB,EAAqC;AACvE,MAAI,OAAO,GAAG,EAAd;;AACA,OAAK,IAAI,EAAE,GAAG,CAAd,EAAiB,EAAE,GAAG,SAAS,CAAC,MAAhC,EAAwC,EAAE,EAA1C,EAA8C;AAC1C,IAAA,OAAO,CAAC,EAAE,GAAG,CAAN,CAAP,GAAkB,SAAS,CAAC,EAAD,CAA3B;AACH;;AACD,MAAI,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,cAAc,CAAC,OAApB,CAAT,EAAuC;AAAE,IAAA,OAAO,EAAE,cAAc,CAAC,OAA1B;AAAmC,IAAA,WAAW,EAAE,cAAc,CAAC;AAA/D,GAAvC,CAAtB;;AACA,MAAI,IAAI,GAAG,cAAc,CAAC,IAAf,IAAuB,EAAlC;AACA,EAAA,OAAO,CAAC,OAAR,CAAgB,UAAU,MAAV,EAAkB;AAC9B,IAAA,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,OAAL,CAAT,EAAwB,MAAM,CAAC,OAA/B,CAAT,EAAkD;AAAE,MAAA,OAAO,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,OAAO,CAAC,OAAb,CAAT,EAAgC,MAAM,CAAC,OAAvC;AAAnB,KAAlD,CAAlB;AACA,QAAI,MAAM,CAAC,WAAX,EACI,OAAO,CAAC,WAAR,GAAsB,MAAM,CAAC,WAA7B;AACJ,IAAA,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,EAAD,EAAK,IAAL,CAAT,EAAqB,MAAM,CAAC,IAA5B,CAAf;AACH,GALD;AAMA,MAAI,aAAa,GAAG,SAAS,CAAC,aAA9B;AAAA,MAA6C,UAAU,GAAG,SAAS,CAAC,UAApE;AAAA,MAAgF,SAAS,GAAG,SAAS,CAAC,SAAtG;AAAA,MAAiH,KAAK,GAAG,SAAS,CAAC,KAAnI;AACA,MAAI,IAAI,GAAG;AAAE,IAAA,aAAa,EAAE,aAAjB;AAAgC,IAAA,SAAS,EAAE;AAA3C,GAAX;AACA,MAAI,IAAI,CAAC,iBAAT,EACI,IAAI,CAAC,UAAL,GAAkB,UAAlB;AACJ,MAAI,IAAI,CAAC,YAAT,EACI,IAAI,CAAC,KAAL,GAAa,KAAK,CAAC,KAAD,CAAlB;AACJ,SAAO;AACH,IAAA,OAAO,EAAE,OADN;AAEH,IAAA,IAAI,EAAE;AAFH,GAAP;AAIJ,CAvBU","sourcesContent":["import { __assign } from \"tslib\";\nimport { print } from 'graphql/language/printer';\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nexport var fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nexport var selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign(__assign({}, fallbackConfig.options), { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http || {};\n    configs.forEach(function (config) {\n        options = __assign(__assign(__assign({}, options), config.options), { headers: __assign(__assign({}, options.headers), config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign(__assign({}, http), config.http);\n    });\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = print(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\n//# sourceMappingURL=selectHttpOptionsAndBody.js.map"]},"metadata":{},"sourceType":"module"}