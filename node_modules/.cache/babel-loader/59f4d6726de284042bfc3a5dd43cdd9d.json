{"ast":null,"code":"import { __awaiter, __generator, __assign } from 'tslib';\nimport { invariant } from 'ts-invariant';\nimport { createFragmentMap } from '../utilities/graphql/fragments.js';\nimport { resultKeyNameFromField, argumentsObjectFromField, isField, isInlineFragment } from '../utilities/graphql/storeUtils.js';\nimport { getMainDefinition, getFragmentDefinitions } from '../utilities/graphql/getFromAST.js';\nimport { visit, BREAK } from 'graphql/language/visitor';\nimport { hasDirectives, shouldInclude } from '../utilities/graphql/directives.js';\nimport { removeClientSetsFromDocument, buildQueryFromSelectionSet } from '../utilities/graphql/transform.js';\nimport { mergeDeep, mergeDeepArray } from '../utilities/common/mergeDeep.js';\n\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n        client = _a.client,\n        resolvers = _a.resolvers,\n        fragmentMatcher = _a.fragmentMatcher;\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n\n    this.resolvers = this.resolvers || {};\n\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n        remoteResult = _a.remoteResult,\n        context = _a.context,\n        variables = _a.variables,\n        _b = _a.onlyRunForcedResolvers,\n        onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n\n        return [2, remoteResult];\n      });\n    });\n  };\n\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n\n    return null;\n  };\n\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  };\n\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                process.env.NODE_ENV === \"production\" ? invariant(fragment, 22) : invariant(fragment, \"No fragment named \" + selection.name.value);\n              }\n\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n\n              return [2];\n            });\n          });\n        };\n\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n\n            if (resolve) {\n              resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }));\n            }\n          }\n        }\n\n        return [2, resultPromise.then(function (result) {\n          if (result === void 0) {\n            result = defaultResult;\n          }\n\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n\n          if (!field.selectionSet) {\n            return result;\n          }\n\n          if (result == null) {\n            return result;\n          }\n\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, result, execContext);\n          }\n\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, item, execContext);\n      }\n\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n      }\n    }));\n  };\n\n  return LocalState;\n}();\n\nexport { LocalState };","map":{"version":3,"sources":["LocalState.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { visit, BREAK } from 'graphql/language/visitor';\nimport { invariant } from 'ts-invariant';\nimport { getMainDefinition, getFragmentDefinitions, } from '../utilities/graphql/getFromAST';\nimport { hasDirectives, shouldInclude } from '../utilities/graphql/directives';\nimport { createFragmentMap } from '../utilities/graphql/fragments';\nimport { buildQueryFromSelectionSet, removeClientSetsFromDocument, } from '../utilities/graphql/transform';\nimport { mergeDeep, mergeDeepArray } from '../utilities/common/mergeDeep';\nimport { argumentsObjectFromField, resultKeyNameFromField, isField, isInlineFragment, } from '../utilities/graphql/storeUtils';\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return __assign(__assign({}, context), { cache: cache,\n            getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field, fragmentMap: execContext.fragmentMap }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\nexport { LocalState };\n//# sourceMappingURL=LocalState.js.map"]},"metadata":{},"sourceType":"module"}