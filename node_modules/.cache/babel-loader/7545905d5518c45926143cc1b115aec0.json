{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { visit } from 'graphql/language/visitor';\n\nfunction shouldInclude(_a, variables) {\n  var directives = _a.directives;\n\n  if (!directives || !directives.length) {\n    return true;\n  }\n\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 37) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nfunction getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\n\nfunction hasDirectives(names, root) {\n  return getDirectiveNames(root).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\n\nfunction hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\n\nfunction getInclusionDirectives(directives) {\n  var result = [];\n\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 38) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n      var ifArgument = directiveArguments[0];\n      process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 39) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n      var ifValue = ifArgument.value;\n      process.env.NODE_ENV === \"production\" ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 40) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n\n  return result;\n}\n\nexport { getDirectiveNames, getInclusionDirectives, hasClientExports, hasDirectives, shouldInclude };","map":{"version":3,"sources":["directives.js"],"names":[],"mappings":"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","sourcesContent":["import { visit } from 'graphql/language/visitor';\nimport { invariant } from 'ts-invariant';\nexport function shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === 'Variable') {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n    });\n}\nexport function getDirectiveNames(root) {\n    var names = [];\n    visit(root, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nexport function hasDirectives(names, root) {\n    return getDirectiveNames(root).some(function (name) { return names.indexOf(name) > -1; });\n}\nexport function hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === 'skip' || value === 'include';\n}\nexport function getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function (directive) {\n            if (!isInclusionDirective(directive))\n                return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n            var ifArgument = directiveArguments[0];\n            invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n            var ifValue = ifArgument.value;\n            invariant(ifValue &&\n                (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n            result.push({ directive: directive, ifArgument: ifArgument });\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=directives.js.map"]},"metadata":{},"sourceType":"module"}