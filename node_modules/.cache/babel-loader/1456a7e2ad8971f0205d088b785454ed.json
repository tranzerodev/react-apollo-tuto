{"ast":null,"code":"function makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises };","map":{"version":3,"sources":["RenderPromises.js"],"names":[],"mappings":"AAAA,SAAS,oBAAT,GAAgC;AAC5B,SAAO;AACH,IAAA,IAAI,EAAE,KADH;AAEH,IAAA,UAAU,EAAE;AAFT,GAAP;AAIH;;AACE,IAAC,cAAc,GAAI,YAAY;AAC9B,WAAS,cAAT,GAA0B;AACtB,SAAK,aAAL,GAAqB,IAAI,GAAJ,EAArB;AACA,SAAK,aAAL,GAAqB,IAAI,GAAJ,EAArB;AACH;;AACD,EAAA,cAAc,CAAC,SAAf,CAAyB,qBAAzB,GAAiD,UAAU,UAAV,EAAsB,KAAtB,EAA6B;AAC1E,SAAK,eAAL,CAAqB,KAArB,EAA4B,UAA5B,GAAyC,UAAzC;AACH,GAFD;;AAGA,EAAA,cAAc,CAAC,SAAf,CAAyB,gBAAzB,GAA4C,UAAU,KAAV,EAAiB;AACzD,WAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,UAAnC;AACH,GAFD;;AAGA,EAAA,cAAc,CAAC,SAAf,CAAyB,eAAzB,GAA2C,UAAU,aAAV,EAAyB,MAAzB,EAAiC;AACxE,QAAI,IAAI,GAAG,KAAK,eAAL,CAAqB,aAAa,CAAC,UAAd,EAArB,CAAX;;AACA,QAAI,CAAC,IAAI,CAAC,IAAV,EAAgB;AACZ,WAAK,aAAL,CAAmB,GAAnB,CAAuB,aAAa,CAAC,UAAd,EAAvB,EAAmD,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB;AAC9E,QAAA,OAAO,CAAC,aAAa,CAAC,SAAd,EAAD,CAAP;AACH,OAFkD,CAAnD;AAGA,aAAO,IAAP;AACH;;AACD,WAAO,MAAM,EAAb;AACH,GATD;;AAUA,EAAA,cAAc,CAAC,SAAf,CAAyB,WAAzB,GAAuC,YAAY;AAC/C,WAAO,KAAK,aAAL,CAAmB,IAAnB,GAA0B,CAAjC;AACH,GAFD;;AAGA,EAAA,cAAc,CAAC,SAAf,CAAyB,uBAAzB,GAAmD,YAAY;AAC3D,QAAI,KAAK,GAAG,IAAZ;;AACA,QAAI,QAAQ,GAAG,EAAf;AACA,SAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAU,OAAV,EAAmB,aAAnB,EAAkC;AACzD,MAAA,KAAK,CAAC,eAAN,CAAsB,aAAtB,EAAqC,IAArC,GAA4C,IAA5C;AACA,MAAA,QAAQ,CAAC,IAAT,CAAc,OAAd;AACH,KAHD;AAIA,SAAK,aAAL,CAAmB,KAAnB;AACA,WAAO,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAP;AACH,GATD;;AAUA,EAAA,cAAc,CAAC,SAAf,CAAyB,eAAzB,GAA2C,UAAU,KAAV,EAAiB;AACxD,QAAI,aAAa,GAAG,KAAK,aAAzB;AACA,QAAI,KAAK,GAAG,KAAK,CAAC,KAAlB;AAAA,QAAyB,SAAS,GAAG,KAAK,CAAC,SAA3C;AACA,QAAI,MAAM,GAAG,aAAa,CAAC,GAAd,CAAkB,KAAlB,KAA4B,IAAI,GAAJ,EAAzC;AACA,QAAI,CAAC,aAAa,CAAC,GAAd,CAAkB,KAAlB,CAAL,EACI,aAAa,CAAC,GAAd,CAAkB,KAAlB,EAAyB,MAAzB;AACJ,QAAI,eAAe,GAAG,IAAI,CAAC,SAAL,CAAe,SAAf,CAAtB;AACA,QAAI,IAAI,GAAG,MAAM,CAAC,GAAP,CAAW,eAAX,KAA+B,oBAAoB,EAA9D;AACA,QAAI,CAAC,MAAM,CAAC,GAAP,CAAW,eAAX,CAAL,EACI,MAAM,CAAC,GAAP,CAAW,eAAX,EAA4B,IAA5B;AACJ,WAAO,IAAP;AACH,GAXD;;AAYA,SAAO,cAAP;AACH,CA/CqB,EAAnB","sourcesContent":["function makeDefaultQueryInfo() {\n    return {\n        seen: false,\n        observable: null\n    };\n}\nvar RenderPromises = (function () {\n    function RenderPromises() {\n        this.queryPromises = new Map();\n        this.queryInfoTrie = new Map();\n    }\n    RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n        this.lookupQueryInfo(props).observable = observable;\n    };\n    RenderPromises.prototype.getSSRObservable = function (props) {\n        return this.lookupQueryInfo(props).observable;\n    };\n    RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n        var info = this.lookupQueryInfo(queryInstance.getOptions());\n        if (!info.seen) {\n            this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n                resolve(queryInstance.fetchData());\n            }));\n            return null;\n        }\n        return finish();\n    };\n    RenderPromises.prototype.hasPromises = function () {\n        return this.queryPromises.size > 0;\n    };\n    RenderPromises.prototype.consumeAndAwaitPromises = function () {\n        var _this = this;\n        var promises = [];\n        this.queryPromises.forEach(function (promise, queryInstance) {\n            _this.lookupQueryInfo(queryInstance).seen = true;\n            promises.push(promise);\n        });\n        this.queryPromises.clear();\n        return Promise.all(promises);\n    };\n    RenderPromises.prototype.lookupQueryInfo = function (props) {\n        var queryInfoTrie = this.queryInfoTrie;\n        var query = props.query, variables = props.variables;\n        var varMap = queryInfoTrie.get(query) || new Map();\n        if (!queryInfoTrie.has(query))\n            queryInfoTrie.set(query, varMap);\n        var variablesString = JSON.stringify(variables);\n        var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n        if (!varMap.has(variablesString))\n            varMap.set(variablesString, info);\n        return info;\n    };\n    return RenderPromises;\n}());\nexport { RenderPromises };\n//# sourceMappingURL=RenderPromises.js.map"]},"metadata":{},"sourceType":"module"}