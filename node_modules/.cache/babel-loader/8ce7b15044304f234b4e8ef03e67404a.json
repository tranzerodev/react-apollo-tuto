{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { ApolloLink } from '../core/ApolloLink.js';\nimport { serializeFetchParameter } from './serializeFetchParameter.js';\nimport { selectURI } from './selectURI.js';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse.js';\nimport { checkFetcher } from './checkFetcher.js';\nimport { selectHttpOptionsAndBody, fallbackHttpConfig } from './selectHttpOptionsAndBody.js';\nimport { createSignalIfSupported } from './createSignalIfSupported.js';\nimport { rewriteURIForGET } from './rewriteURIForGET.js';\nimport { fromError } from '../utils/fromError.js';\n\nvar createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      fetcher = linkOptions.fetch,\n      includeExtensions = linkOptions.includeExtensions,\n      useGETForQueries = linkOptions.useGETForQueries,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n\n  checkFetcher(fetcher);\n\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    var controller;\n\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n          _controller = _c.controller,\n          signal = _c.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n          newURI = _d.newURI,\n          parseError = _d.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n\nexport { createHttpLink };","map":{"version":3,"sources":["createHttpLink.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { Observable } from '../../utilities/observables/Observable';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport { selectHttpOptionsAndBody, fallbackHttpConfig } from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { ApolloLink } from '../core/ApolloLink';\nimport { fromError } from '../utils/fromError';\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n//# sourceMappingURL=createHttpLink.js.map"]},"metadata":{},"sourceType":"module"}