{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError.js';\nimport { DocumentType } from '../parser/parser.js';\nimport { OperationData } from './OperationData.js';\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [this.runMutation, __assign(__assign({}, result), {\n      client: this.refreshClient().client\n    })];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy,\n        errorPolicy = _a.errorPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function () {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nexport { MutationData };","map":{"version":3,"sources":["MutationData.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { DocumentType } from '../parser/parser';\nimport { ApolloError } from '../../errors/ApolloError';\nimport { OperationData } from './OperationData';\nvar MutationData = (function (_super) {\n    __extends(MutationData, _super);\n    function MutationData(_a) {\n        var options = _a.options, context = _a.context, result = _a.result, setResult = _a.setResult;\n        var _this = _super.call(this, options, context) || this;\n        _this.runMutation = function (mutationFunctionOptions) {\n            if (mutationFunctionOptions === void 0) { mutationFunctionOptions = {}; }\n            _this.onMutationStart();\n            var mutationId = _this.generateNewMutationId();\n            return _this.mutate(mutationFunctionOptions)\n                .then(function (response) {\n                _this.onMutationCompleted(response, mutationId);\n                return response;\n            })\n                .catch(function (error) {\n                _this.onMutationError(error, mutationId);\n                if (!_this.getOptions().onError)\n                    throw error;\n            });\n        };\n        _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n        _this.result = result;\n        _this.setResult = setResult;\n        _this.mostRecentMutationId = 0;\n        return _this;\n    }\n    MutationData.prototype.execute = function (result) {\n        this.isMounted = true;\n        this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n        return [\n            this.runMutation,\n            __assign(__assign({}, result), { client: this.refreshClient().client })\n        ];\n    };\n    MutationData.prototype.afterExecute = function () {\n        this.isMounted = true;\n        return this.unmount.bind(this);\n    };\n    MutationData.prototype.cleanup = function () {\n    };\n    MutationData.prototype.mutate = function (mutationFunctionOptions) {\n        var _a = this.getOptions(), mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, update = _a.update, _b = _a.context, mutationContext = _b === void 0 ? {} : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy;\n        var mutateOptions = __assign({}, mutationFunctionOptions);\n        var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n        delete mutateOptions.variables;\n        return this.refreshClient().client.mutate(__assign({ mutation: mutation,\n            optimisticResponse: optimisticResponse, refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries, awaitRefetchQueries: awaitRefetchQueries,\n            update: update, context: mutationContext, fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy, variables: mutateVariables }, mutateOptions));\n    };\n    MutationData.prototype.onMutationStart = function () {\n        if (!this.result.loading && !this.getOptions().ignoreResults) {\n            this.updateResult({\n                loading: true,\n                error: undefined,\n                data: undefined,\n                called: true\n            });\n        }\n    };\n    MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n        var _a = this.getOptions(), onCompleted = _a.onCompleted, ignoreResults = _a.ignoreResults;\n        var data = response.data, errors = response.errors;\n        var error = errors && errors.length > 0\n            ? new ApolloError({ graphQLErrors: errors })\n            : undefined;\n        var callOncomplete = function () {\n            return onCompleted ? onCompleted(data) : null;\n        };\n        if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n            this.updateResult({\n                called: true,\n                loading: false,\n                data: data,\n                error: error\n            });\n        }\n        callOncomplete();\n    };\n    MutationData.prototype.onMutationError = function (error, mutationId) {\n        var onError = this.getOptions().onError;\n        if (this.isMostRecentMutation(mutationId)) {\n            this.updateResult({\n                loading: false,\n                error: error,\n                data: undefined,\n                called: true\n            });\n        }\n        if (onError) {\n            onError(error);\n        }\n    };\n    MutationData.prototype.generateNewMutationId = function () {\n        return ++this.mostRecentMutationId;\n    };\n    MutationData.prototype.isMostRecentMutation = function (mutationId) {\n        return this.mostRecentMutationId === mutationId;\n    };\n    MutationData.prototype.updateResult = function (result) {\n        if (this.isMounted &&\n            (!this.previousResult || !equal(this.previousResult, result))) {\n            this.setResult(result);\n            this.previousResult = result;\n        }\n    };\n    return MutationData;\n}(OperationData));\nexport { MutationData };\n//# sourceMappingURL=MutationData.js.map"]},"metadata":{},"sourceType":"module"}