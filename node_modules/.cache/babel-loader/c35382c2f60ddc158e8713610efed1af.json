{"ast":null,"code":"import { __assign, __extends } from 'tslib';\nimport { isReference, makeReference } from '../../utilities/graphql/storeUtils.js';\nimport { equal } from '@wry/equality';\nimport { canUseWeakMap } from '../../utilities/common/canUse.js';\nimport { DeepMerger } from '../../utilities/common/mergeDeep.js';\nimport { KeyTrie, dep } from 'optimism';\nimport { maybeDeepFreeze } from '../../utilities/common/maybeDeepFreeze.js';\nimport { hasOwn, fieldNameFromStoreName } from './helpers.js';\nvar DELETE = Object.create(null);\n\nvar delModifier = function () {\n  return DELETE;\n};\n\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n\n    this.toReference = function (object, mergeIntoStore) {\n      var id = _this.policies.identify(object)[0];\n\n      if (id) {\n        var ref = makeReference(id);\n\n        if (mergeIntoStore) {\n          _this.merge(id, object);\n        }\n\n        return ref;\n      }\n    };\n  }\n\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n    return hasOwn.call(this.data, dataId) ? this.data[dataId] : this instanceof Layer ? this.parent.lookup(dataId, dependOnExistence) : void 0;\n  };\n\n  EntityStore.prototype.merge = function (dataId, incoming) {\n    var _this = this;\n\n    var existing = this.lookup(dataId);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[fieldNameFromStoreName(storeFieldName)] = 1;\n\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n\n      var readField_1 = function (fieldNameOrOptions, from) {\n        return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n          fieldName: fieldNameOrOptions,\n          from: from || makeReference(dataId)\n        } : fieldNameOrOptions, {\n          canRead: _this.canRead,\n          toReference: _this.toReference,\n          getFieldValue: _this.getFieldValue\n        });\n      };\n\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), {\n            DELETE: DELETE,\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            isReference: isReference,\n            toReference: _this.toReference,\n            canRead: _this.canRead,\n            readField: readField_1\n          });\n          if (newValue === DELETE) newValue = void 0;\n\n          if (newValue !== fieldValue) {\n            changedFields_1[storeFieldName] = newValue;\n            needToMerge_1 = true;\n            fieldValue = newValue;\n          }\n        }\n\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.evict = function (options) {\n    var evicted = false;\n\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n\n      if (this instanceof Layer) {\n        evicted = this.parent.evict(options) || evicted;\n      }\n\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n\n    return evicted;\n  };\n\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n\n    if (newData) {\n      Object.keys(newData).forEach(function (dataId) {\n        _this.merge(dataId, newData[dataId]);\n      });\n    }\n  };\n\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n\n    return 0;\n  };\n\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    }\n\n    return ids;\n  };\n\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n\n    if (idsToRemove.length) {\n      var root_1 = this;\n\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n\n    return idsToRemove;\n  };\n\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var workSet_1 = new Set([this.data[dataId]]);\n\n      var canTraverse_1 = function (obj) {\n        return obj !== null && typeof obj === 'object';\n      };\n\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        } else if (canTraverse_1(obj)) {\n          Object.values(obj).filter(canTraverse_1).forEach(workSet_1.add, workSet_1);\n        }\n      });\n    }\n\n    return this.refs[dataId];\n  };\n\n  EntityStore.prototype.makeCacheKey = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return this.group.keyMaker.lookupArray(args);\n  };\n\n  return EntityStore;\n}();\n\nvar CacheGroup = function () {\n  function CacheGroup(caching) {\n    this.caching = caching;\n    this.d = null;\n    this.keyMaker = new KeyTrie(canUseWeakMap);\n    this.d = caching ? dep() : null;\n  }\n\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n    }\n  };\n\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName));\n    }\n  };\n\n  return CacheGroup;\n}();\n\nfunction makeDepKey(dataId, storeFieldName) {\n  return fieldNameFromStoreName(storeFieldName) + '#' + dataId;\n}\n\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n\n    function Root(_a) {\n      var policies = _a.policies,\n          _b = _a.resultCaching,\n          resultCaching = _b === void 0 ? true : _b,\n          seed = _a.seed;\n\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n\n      _this.sharedLayerGroup = new CacheGroup(resultCaching);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n\n    Root.prototype.addLayer = function (layerId, replay) {\n      return new Layer(layerId, this, replay, this.sharedLayerGroup);\n    };\n\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n\n    return Root;\n  }(EntityStore);\n\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n\n    var parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          if (_this.data[dataId] !== parent.lookup(dataId)) {\n            _this.delete(dataId);\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n\n  return Layer;\n}(EntityStore);\n\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nfunction supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n\nexport { EntityStore, supportsResultCaching };","map":{"version":3,"sources":["entityStore.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { dep, KeyTrie } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { isReference, makeReference } from '../../utilities/graphql/storeUtils';\nimport { DeepMerger } from '../../utilities/common/mergeDeep';\nimport { maybeDeepFreeze } from '../../utilities/common/maybeDeepFreeze';\nimport { canUseWeakMap } from '../../utilities/common/canUse';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nvar DELETE = Object.create(null);\nvar delModifier = function () { return DELETE; };\nvar EntityStore = (function () {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        this.rootIds = Object.create(null);\n        this.refs = Object.create(null);\n        this.getFieldValue = function (objectOrReference, storeFieldName) { return maybeDeepFreeze(isReference(objectOrReference)\n            ? _this.get(objectOrReference.__ref, storeFieldName)\n            : objectOrReference && objectOrReference[storeFieldName]); };\n        this.canRead = function (objOrRef) {\n            return isReference(objOrRef)\n                ? _this.has(objOrRef.__ref)\n                : typeof objOrRef === \"object\";\n        };\n        this.toReference = function (object, mergeIntoStore) {\n            var id = _this.policies.identify(object)[0];\n            if (id) {\n                var ref = makeReference(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, object);\n                }\n                return ref;\n            }\n        };\n    }\n    EntityStore.prototype.toObject = function () {\n        return __assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" &&\n            hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n        if (dependOnExistence)\n            this.group.depend(dataId, \"__exists\");\n        return hasOwn.call(this.data, dataId) ? this.data[dataId] :\n            this instanceof Layer ? this.parent.lookup(dataId, dependOnExistence) : void 0;\n    };\n    EntityStore.prototype.merge = function (dataId, incoming) {\n        var _this = this;\n        var existing = this.lookup(dataId);\n        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                if (!existing)\n                    fieldsToDirty_1.__exists = 1;\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        fieldsToDirty_1[fieldNameFromStoreName(storeFieldName)] = 1;\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                Object.keys(fieldsToDirty_1).forEach(function (fieldName) { return _this.group.dirty(dataId, fieldName); });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function (dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var readField_1 = function (fieldNameOrOptions, from) { return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                fieldName: fieldNameOrOptions,\n                from: from || makeReference(dataId),\n            } : fieldNameOrOptions, {\n                canRead: _this.canRead,\n                toReference: _this.toReference,\n                getFieldValue: _this.getFieldValue,\n            }); };\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                var fieldName = fieldNameFromStoreName(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0)\n                    return;\n                var modify = typeof fields === \"function\"\n                    ? fields\n                    : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE :\n                        modify(maybeDeepFreeze(fieldValue), {\n                            DELETE: DELETE,\n                            fieldName: fieldName,\n                            storeFieldName: storeFieldName,\n                            isReference: isReference,\n                            toReference: _this.toReference,\n                            canRead: _this.canRead,\n                            readField: readField_1,\n                        });\n                    if (newValue === DELETE)\n                        newValue = void 0;\n                    if (newValue !== fieldValue) {\n                        changedFields_1[storeFieldName] = newValue;\n                        needToMerge_1 = true;\n                        fieldValue = newValue;\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    }\n                    else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    EntityStore.prototype.delete = function (dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args\n                ? this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })\n                : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {},\n                _a[storeFieldName] = delModifier,\n                _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function (options) {\n        var evicted = false;\n        if (options.id) {\n            if (hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer) {\n                evicted = this.parent.evict(options) || evicted;\n            }\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            Object.keys(newData).forEach(function (dataId) {\n                _this.merge(dataId, newData[dataId]);\n            });\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    EntityStore.prototype.getRootIdSet = function (ids) {\n        if (ids === void 0) { ids = new Set(); }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        }\n        return ids;\n    };\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var workSet_1 = new Set([this.data[dataId]]);\n            var canTraverse_1 = function (obj) { return obj !== null && typeof obj === 'object'; };\n            workSet_1.forEach(function (obj) {\n                if (isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                }\n                else if (canTraverse_1(obj)) {\n                    Object.values(obj)\n                        .filter(canTraverse_1)\n                        .forEach(workSet_1.add, workSet_1);\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return this.group.keyMaker.lookupArray(args);\n    };\n    return EntityStore;\n}());\nexport { EntityStore };\nvar CacheGroup = (function () {\n    function CacheGroup(caching) {\n        this.caching = caching;\n        this.d = null;\n        this.keyMaker = new KeyTrie(canUseWeakMap);\n        this.d = caching ? dep() : null;\n    }\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName));\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    return fieldNameFromStoreName(storeFieldName) + '#' + dataId;\n}\n(function (EntityStore) {\n    var Root = (function (_super) {\n        __extends(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.sharedLayerGroup = new CacheGroup(resultCaching);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            return new Layer(layerId, this, replay, this.sharedLayerGroup);\n        };\n        Root.prototype.removeLayer = function () {\n            return this;\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                Object.keys(this.data).forEach(function (dataId) {\n                    if (_this.data[dataId] !== parent.lookup(dataId)) {\n                        _this.delete(dataId);\n                    }\n                });\n            }\n            return parent;\n        }\n        if (parent === this.parent)\n            return this;\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return __assign(__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    return Layer;\n}(EntityStore));\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n    return !!(store instanceof EntityStore && store.group.caching);\n}\n//# sourceMappingURL=entityStore.js.map"]},"metadata":{},"sourceType":"module"}