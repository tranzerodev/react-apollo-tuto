{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError.js';\nimport { NetworkStatus } from '../../core/networkStatus.js';\nimport { DocumentType } from '../parser/parser.js';\nimport { OperationData } from './OperationData.js';\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getQueryResult = function () {\n      var result = _this.observableQueryFields();\n\n      var options = _this.getOptions();\n\n      if (options.skip) {\n        result = __assign(__assign({}, result), {\n          data: undefined,\n          error: undefined,\n          loading: false,\n          called: true\n        });\n      } else if (_this.currentObservable) {\n        var currentResult = _this.currentObservable.getCurrentResult();\n\n        var loading = currentResult.loading,\n            partial = currentResult.partial,\n            networkStatus = currentResult.networkStatus,\n            errors = currentResult.errors;\n        var error = currentResult.error,\n            data = currentResult.data;\n\n        if (errors && errors.length > 0) {\n          error = new ApolloError({\n            graphQLErrors: errors\n          });\n        }\n\n        result = __assign(__assign({}, result), {\n          loading: loading,\n          networkStatus: networkStatus,\n          error: error,\n          called: true\n        });\n\n        if (loading) {\n          var previousData = _this.previousData.result && _this.previousData.result.data;\n          result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n        } else if (error) {\n          Object.assign(result, {\n            data: (_this.currentObservable.getLastResult() || {}).data\n          });\n        } else {\n          var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n          var partialRefetch = options.partialRefetch;\n\n          if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n              loading: true,\n              networkStatus: NetworkStatus.loading\n            });\n            result.refetch();\n            return result;\n          }\n\n          result.data = data;\n        }\n      }\n\n      result.client = _this.client;\n\n      _this.setOptions(options, true);\n\n      _this.previousData.loading = _this.previousData.result && _this.previousData.result.loading || false;\n      _this.previousData.result = result;\n      _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      var _a;\n\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        if (_this.previousOptions.skip) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(error, _this.previousData.error)) {\n          _this.previousData.error = error;\n          onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n\n    if (currentObservable) {\n      var lastError = currentObservable.getLastError();\n      var lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError: lastError,\n        lastResult: lastResult\n      });\n    }\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previousData.result) return;\n    var _a = this.previousData.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nexport { QueryData };","map":{"version":3,"sources":["QueryData.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError';\nimport { NetworkStatus } from '../../core/networkStatus';\nimport { DocumentType } from '../parser/parser';\nimport { OperationData } from './OperationData';\nvar QueryData = (function (_super) {\n    __extends(QueryData, _super);\n    function QueryData(_a) {\n        var options = _a.options, context = _a.context, onNewData = _a.onNewData;\n        var _this = _super.call(this, options, context) || this;\n        _this.previousData = {};\n        _this.runLazy = false;\n        _this.runLazyQuery = function (options) {\n            _this.cleanup();\n            _this.runLazy = true;\n            _this.lazyOptions = options;\n            _this.onNewData();\n        };\n        _this.getQueryResult = function () {\n            var result = _this.observableQueryFields();\n            var options = _this.getOptions();\n            if (options.skip) {\n                result = __assign(__assign({}, result), { data: undefined, error: undefined, loading: false, called: true });\n            }\n            else if (_this.currentObservable) {\n                var currentResult = _this.currentObservable.getCurrentResult();\n                var loading = currentResult.loading, partial = currentResult.partial, networkStatus = currentResult.networkStatus, errors = currentResult.errors;\n                var error = currentResult.error, data = currentResult.data;\n                if (errors && errors.length > 0) {\n                    error = new ApolloError({ graphQLErrors: errors });\n                }\n                result = __assign(__assign({}, result), { loading: loading,\n                    networkStatus: networkStatus,\n                    error: error, called: true });\n                if (loading) {\n                    var previousData = _this.previousData.result && _this.previousData.result.data;\n                    result.data =\n                        previousData && data\n                            ? __assign(__assign({}, previousData), data) : previousData || data;\n                }\n                else if (error) {\n                    Object.assign(result, {\n                        data: (_this.currentObservable.getLastResult() || {})\n                            .data\n                    });\n                }\n                else {\n                    var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n                    var partialRefetch = options.partialRefetch;\n                    if (partialRefetch &&\n                        partial &&\n                        (!data || Object.keys(data).length === 0) &&\n                        fetchPolicy !== 'cache-only') {\n                        Object.assign(result, {\n                            loading: true,\n                            networkStatus: NetworkStatus.loading\n                        });\n                        result.refetch();\n                        return result;\n                    }\n                    result.data = data;\n                }\n            }\n            result.client = _this.client;\n            _this.setOptions(options, true);\n            _this.previousData.loading =\n                _this.previousData.result && _this.previousData.result.loading || false;\n            _this.previousData.result = result;\n            _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n            return result;\n        };\n        _this.obsRefetch = function (variables) {\n            return _this.currentObservable.refetch(variables);\n        };\n        _this.obsFetchMore = function (fetchMoreOptions) { return _this.currentObservable.fetchMore(fetchMoreOptions); };\n        _this.obsUpdateQuery = function (mapFn) { return _this.currentObservable.updateQuery(mapFn); };\n        _this.obsStartPolling = function (pollInterval) {\n            var _a;\n            (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n        };\n        _this.obsStopPolling = function () {\n            var _a;\n            (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n        };\n        _this.obsSubscribeToMore = function (options) { return _this.currentObservable.subscribeToMore(options); };\n        _this.onNewData = onNewData;\n        return _this;\n    }\n    QueryData.prototype.execute = function () {\n        this.refreshClient();\n        var _a = this.getOptions(), skip = _a.skip, query = _a.query;\n        if (skip || query !== this.previousData.query) {\n            this.removeQuerySubscription();\n            this.previousData.query = query;\n        }\n        this.updateObservableQuery();\n        if (this.isMounted)\n            this.startQuerySubscription();\n        return this.getExecuteSsrResult() || this.getExecuteResult();\n    };\n    QueryData.prototype.executeLazy = function () {\n        return !this.runLazy\n            ? [\n                this.runLazyQuery,\n                {\n                    loading: false,\n                    networkStatus: NetworkStatus.ready,\n                    called: false,\n                    data: undefined\n                }\n            ]\n            : [this.runLazyQuery, this.execute()];\n    };\n    QueryData.prototype.fetchData = function () {\n        var _this = this;\n        var options = this.getOptions();\n        if (options.skip || options.ssr === false)\n            return false;\n        return new Promise(function (resolve) { return _this.startQuerySubscription(resolve); });\n    };\n    QueryData.prototype.afterExecute = function (_a) {\n        var _b = (_a === void 0 ? {} : _a).lazy, lazy = _b === void 0 ? false : _b;\n        this.isMounted = true;\n        if (!lazy || this.runLazy) {\n            this.handleErrorOrCompleted();\n        }\n        this.previousOptions = this.getOptions();\n        return this.unmount.bind(this);\n    };\n    QueryData.prototype.cleanup = function () {\n        this.removeQuerySubscription();\n        delete this.currentObservable;\n        delete this.previousData.result;\n    };\n    QueryData.prototype.getOptions = function () {\n        var options = _super.prototype.getOptions.call(this);\n        if (this.lazyOptions) {\n            options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n            options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n        }\n        if (this.runLazy) {\n            delete options.skip;\n        }\n        return options;\n    };\n    QueryData.prototype.ssrInitiated = function () {\n        return this.context && this.context.renderPromises;\n    };\n    QueryData.prototype.getExecuteResult = function () {\n        var result = this.getQueryResult();\n        this.startQuerySubscription();\n        return result;\n    };\n    ;\n    QueryData.prototype.getExecuteSsrResult = function () {\n        var ssrDisabled = this.getOptions().ssr === false;\n        var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n        var ssrLoading = __assign({ loading: true, networkStatus: NetworkStatus.loading, called: true, data: undefined, stale: false, client: this.client }, this.observableQueryFields());\n        if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n            this.previousData.result = ssrLoading;\n            return ssrLoading;\n        }\n        var result;\n        if (this.ssrInitiated()) {\n            result =\n                this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n        }\n        return result;\n    };\n    QueryData.prototype.prepareObservableQueryOptions = function () {\n        var options = this.getOptions();\n        this.verifyDocumentType(options.query, DocumentType.Query);\n        var displayName = options.displayName || 'Query';\n        if (this.ssrInitiated() &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options.fetchPolicy = 'cache-first';\n        }\n        return __assign(__assign({}, options), { displayName: displayName, context: options.context });\n    };\n    QueryData.prototype.initializeObservableQuery = function () {\n        if (this.ssrInitiated()) {\n            this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n        }\n        if (!this.currentObservable) {\n            var observableQueryOptions = this.prepareObservableQueryOptions();\n            this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), { children: null });\n            this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n            if (this.ssrInitiated()) {\n                this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n            }\n        }\n    };\n    QueryData.prototype.updateObservableQuery = function () {\n        if (!this.currentObservable) {\n            this.initializeObservableQuery();\n            return;\n        }\n        var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), { children: null });\n        if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n            this.previousData.observableQueryOptions = newObservableQueryOptions;\n            this.currentObservable\n                .setOptions(newObservableQueryOptions)\n                .catch(function () { });\n        }\n    };\n    QueryData.prototype.startQuerySubscription = function (onNewData) {\n        var _this = this;\n        if (onNewData === void 0) { onNewData = this.onNewData; }\n        if (this.currentSubscription || this.getOptions().skip)\n            return;\n        this.currentSubscription = this.currentObservable.subscribe({\n            next: function (_a) {\n                var loading = _a.loading, networkStatus = _a.networkStatus, data = _a.data;\n                var previousResult = _this.previousData.result;\n                if (previousResult &&\n                    previousResult.loading === loading &&\n                    previousResult.networkStatus === networkStatus &&\n                    equal(previousResult.data, data)) {\n                    return;\n                }\n                if (_this.previousOptions.skip) {\n                    return;\n                }\n                onNewData();\n            },\n            error: function (error) {\n                _this.resubscribeToQuery();\n                if (!error.hasOwnProperty('graphQLErrors'))\n                    throw error;\n                var previousResult = _this.previousData.result;\n                if ((previousResult && previousResult.loading) ||\n                    !equal(error, _this.previousData.error)) {\n                    _this.previousData.error = error;\n                    onNewData();\n                }\n            }\n        });\n    };\n    QueryData.prototype.resubscribeToQuery = function () {\n        this.removeQuerySubscription();\n        var currentObservable = this.currentObservable;\n        if (currentObservable) {\n            var lastError = currentObservable.getLastError();\n            var lastResult = currentObservable.getLastResult();\n            currentObservable.resetLastResults();\n            this.startQuerySubscription();\n            Object.assign(currentObservable, {\n                lastError: lastError,\n                lastResult: lastResult\n            });\n        }\n    };\n    QueryData.prototype.handleErrorOrCompleted = function () {\n        if (!this.currentObservable || !this.previousData.result)\n            return;\n        var _a = this.previousData.result, data = _a.data, loading = _a.loading, error = _a.error;\n        if (!loading) {\n            var _b = this.getOptions(), query = _b.query, variables = _b.variables, onCompleted = _b.onCompleted, onError = _b.onError;\n            if (this.previousOptions &&\n                !this.previousData.loading &&\n                equal(this.previousOptions.query, query) &&\n                equal(this.previousOptions.variables, variables)) {\n                return;\n            }\n            if (onCompleted && !error) {\n                onCompleted(data);\n            }\n            else if (onError && error) {\n                onError(error);\n            }\n        }\n    };\n    QueryData.prototype.removeQuerySubscription = function () {\n        if (this.currentSubscription) {\n            this.currentSubscription.unsubscribe();\n            delete this.currentSubscription;\n        }\n    };\n    QueryData.prototype.observableQueryFields = function () {\n        var _a;\n        return {\n            variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n            refetch: this.obsRefetch,\n            fetchMore: this.obsFetchMore,\n            updateQuery: this.obsUpdateQuery,\n            startPolling: this.obsStartPolling,\n            stopPolling: this.obsStopPolling,\n            subscribeToMore: this.obsSubscribeToMore\n        };\n    };\n    return QueryData;\n}(OperationData));\nexport { QueryData };\n//# sourceMappingURL=QueryData.js.map"]},"metadata":{},"sourceType":"module"}