{"ast":null,"code":"import { getFragmentQueryDocument } from '../../utilities/graphql/fragments.js';\nimport { wrap } from 'optimism';\n\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.getFragmentDoc = wrap(getFragmentQueryDocument);\n  }\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      rootId: options.id || 'ROOT_QUERY',\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.writeQuery = function (options) {\n    return this.write({\n      dataId: options.id || 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n      broadcast: options.broadcast\n    });\n  };\n\n  ApolloCache.prototype.writeFragment = function (options) {\n    return this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      broadcast: options.broadcast\n    });\n  };\n\n  return ApolloCache;\n}();\n\nexport { ApolloCache };","map":{"version":3,"sources":["cache.js"],"names":[],"mappings":";;;AAEG,IAAC,WAAW,GAAI,YAAY;AAC3B,WAAS,WAAT,GAAuB;AACnB,SAAK,cAAL,GAAsB,IAAI,CAAC,wBAAD,CAA1B;AACH;;AACD,EAAA,WAAW,CAAC,SAAZ,CAAsB,iBAAtB,GAA0C,UAAU,QAAV,EAAoB;AAC1D,WAAO,QAAP;AACH,GAFD;;AAGA,EAAA,WAAW,CAAC,SAAZ,CAAsB,QAAtB,GAAiC,UAAU,MAAV,EAAkB;AAC/C;AACH,GAFD;;AAGA,EAAA,WAAW,CAAC,SAAZ,CAAsB,EAAtB,GAA2B,YAAY;AACnC,WAAO,EAAP;AACH,GAFD;;AAGA,EAAA,WAAW,CAAC,SAAZ,CAAsB,MAAtB,GAA+B,UAAU,OAAV,EAAmB;AAC9C,WAAO,KAAP;AACH,GAFD;;AAGA,EAAA,WAAW,CAAC,SAAZ,CAAsB,gBAAtB,GAAyC,UAAU,QAAV,EAAoB;AACzD,WAAO,QAAP;AACH,GAFD;;AAGA,EAAA,WAAW,CAAC,SAAZ,CAAsB,SAAtB,GAAkC,UAAU,OAAV,EAAmB,UAAnB,EAA+B;AAC7D,QAAI,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAE,MAAA,UAAU,GAAG,KAAb;AAAqB;;AAClD,WAAO,KAAK,IAAL,CAAU;AACb,MAAA,MAAM,EAAE,OAAO,CAAC,EAAR,IAAc,YADT;AAEb,MAAA,KAAK,EAAE,OAAO,CAAC,KAFF;AAGb,MAAA,SAAS,EAAE,OAAO,CAAC,SAHN;AAIb,MAAA,UAAU,EAAE;AAJC,KAAV,CAAP;AAMH,GARD;;AASA,EAAA,WAAW,CAAC,SAAZ,CAAsB,YAAtB,GAAqC,UAAU,OAAV,EAAmB,UAAnB,EAA+B;AAChE,QAAI,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAE,MAAA,UAAU,GAAG,KAAb;AAAqB;;AAClD,WAAO,KAAK,IAAL,CAAU;AACb,MAAA,KAAK,EAAE,KAAK,cAAL,CAAoB,OAAO,CAAC,QAA5B,EAAsC,OAAO,CAAC,YAA9C,CADM;AAEb,MAAA,SAAS,EAAE,OAAO,CAAC,SAFN;AAGb,MAAA,MAAM,EAAE,OAAO,CAAC,EAHH;AAIb,MAAA,UAAU,EAAE;AAJC,KAAV,CAAP;AAMH,GARD;;AASA,EAAA,WAAW,CAAC,SAAZ,CAAsB,UAAtB,GAAmC,UAAU,OAAV,EAAmB;AAClD,WAAO,KAAK,KAAL,CAAW;AACd,MAAA,MAAM,EAAE,OAAO,CAAC,EAAR,IAAc,YADR;AAEd,MAAA,MAAM,EAAE,OAAO,CAAC,IAFF;AAGd,MAAA,KAAK,EAAE,OAAO,CAAC,KAHD;AAId,MAAA,SAAS,EAAE,OAAO,CAAC,SAJL;AAKd,MAAA,SAAS,EAAE,OAAO,CAAC;AALL,KAAX,CAAP;AAOH,GARD;;AASA,EAAA,WAAW,CAAC,SAAZ,CAAsB,aAAtB,GAAsC,UAAU,OAAV,EAAmB;AACrD,WAAO,KAAK,KAAL,CAAW;AACd,MAAA,MAAM,EAAE,OAAO,CAAC,EADF;AAEd,MAAA,MAAM,EAAE,OAAO,CAAC,IAFF;AAGd,MAAA,SAAS,EAAE,OAAO,CAAC,SAHL;AAId,MAAA,KAAK,EAAE,KAAK,cAAL,CAAoB,OAAO,CAAC,QAA5B,EAAsC,OAAO,CAAC,YAA9C,CAJO;AAKd,MAAA,SAAS,EAAE,OAAO,CAAC;AALL,KAAX,CAAP;AAOH,GARD;;AASA,SAAO,WAAP;AACH,CAxDkB,EAAhB","sourcesContent":["import { wrap } from 'optimism';\nimport { getFragmentQueryDocument } from '../../utilities/graphql/fragments';\nvar ApolloCache = (function () {\n    function ApolloCache() {\n        this.getFragmentDoc = wrap(getFragmentQueryDocument);\n    }\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            rootId: options.id || 'ROOT_QUERY',\n            query: options.query,\n            variables: options.variables,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: this.getFragmentDoc(options.fragment, options.fragmentName),\n            variables: options.variables,\n            rootId: options.id,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.writeQuery = function (options) {\n        return this.write({\n            dataId: options.id || 'ROOT_QUERY',\n            result: options.data,\n            query: options.query,\n            variables: options.variables,\n            broadcast: options.broadcast,\n        });\n    };\n    ApolloCache.prototype.writeFragment = function (options) {\n        return this.write({\n            dataId: options.id,\n            result: options.data,\n            variables: options.variables,\n            query: this.getFragmentDoc(options.fragment, options.fragmentName),\n            broadcast: options.broadcast,\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\n//# sourceMappingURL=cache.js.map"]},"metadata":{},"sourceType":"module"}