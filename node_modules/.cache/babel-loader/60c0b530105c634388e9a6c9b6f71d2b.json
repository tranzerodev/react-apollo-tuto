{"ast":null,"code":"import { __extends } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { validateOperation } from '../utils/validateOperation.js';\nimport { createOperation } from '../utils/createOperation.js';\nimport { transformOperation } from '../utils/transformOperation.js';\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\n\nvar LinkError = function (_super) {\n  __extends(LinkError, _super);\n\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n\n    _this.link = link;\n    return _this;\n  }\n\n  return LinkError;\n}(Error);\n\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n\n  ApolloLink.empty = function () {\n    return new ApolloLink(function () {\n      return Observable.of();\n    });\n  };\n\n  ApolloLink.from = function (links) {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce(function (x, y) {\n      return x.concat(y);\n    });\n  };\n\n  ApolloLink.split = function (test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(function (operation) {\n        return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.execute = function (link, operation) {\n    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n  };\n\n  ApolloLink.concat = function (first, second) {\n    var firstLink = toLink(first);\n\n    if (isTerminating(firstLink)) {\n      process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n      return firstLink;\n    }\n\n    var nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(function (operation) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op) || Observable.of();\n        }) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n  };\n\n  ApolloLink.prototype.concat = function (next) {\n    return ApolloLink.concat(this, next);\n  };\n\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError('request is not implemented');\n  };\n\n  ApolloLink.prototype.onError = function (reason) {\n    throw reason;\n  };\n\n  ApolloLink.prototype.setOnError = function (fn) {\n    this.onError = fn;\n    return this;\n  };\n\n  return ApolloLink;\n}();\n\nexport { ApolloLink };","map":{"version":3,"sources":["ApolloLink.js"],"names":[],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { Observable } from '../../utilities/observables/Observable';\nimport { validateOperation } from '../utils/validateOperation';\nimport { createOperation } from '../utils/createOperation';\nimport { transformOperation } from '../utils/transformOperation';\nfunction passthrough(op, forward) {\n    return (forward ? forward(op) : Observable.of());\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.empty = function () {\n        return new ApolloLink(function () { return Observable.of(); });\n    };\n    ApolloLink.from = function (links) {\n        if (links.length === 0)\n            return ApolloLink.empty();\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n    };\n    ApolloLink.split = function (test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            return new ApolloLink(function (operation) {\n                return test(operation)\n                    ? leftLink.request(operation) || Observable.of()\n                    : rightLink.request(operation) || Observable.of();\n            });\n        }\n        else {\n            return new ApolloLink(function (operation, forward) {\n                return test(operation)\n                    ? leftLink.request(operation, forward) || Observable.of()\n                    : rightLink.request(operation, forward) || Observable.of();\n            });\n        }\n    };\n    ApolloLink.execute = function (link, operation) {\n        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n    };\n    ApolloLink.concat = function (first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        if (isTerminating(nextLink)) {\n            return new ApolloLink(function (operation) {\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n            });\n        }\n        else {\n            return new ApolloLink(function (operation, forward) {\n                return (firstLink.request(operation, function (op) {\n                    return nextLink.request(op, forward) || Observable.of();\n                }) || Observable.of());\n            });\n        }\n    };\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw new InvariantError('request is not implemented');\n    };\n    ApolloLink.prototype.onError = function (reason) {\n        throw reason;\n    };\n    ApolloLink.prototype.setOnError = function (fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}());\nexport { ApolloLink };\n//# sourceMappingURL=ApolloLink.js.map"]},"metadata":{},"sourceType":"module"}