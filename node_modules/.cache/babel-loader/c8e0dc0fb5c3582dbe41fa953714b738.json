{"ast":null,"code":"import { invariant } from 'ts-invariant';\nvar DocumentType;\n\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\n\nvar cache = new Map();\n\nfunction operationName(type) {\n  var name;\n\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n\n  return name;\n}\n\nfunction parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  process.env.NODE_ENV === \"production\" ? invariant(!!document && !!document.kind, 9) : invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\");\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 10) : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\");\n  process.env.NODE_ENV === \"production\" ? invariant(queries.length + mutations.length + subscriptions.length <= 1, 11) : invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") + (\"subscriptions and \" + mutations.length + \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  process.env.NODE_ENV === \"production\" ? invariant(definitions.length === 1, 12) : invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" + (definitions.length + \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport { DocumentType, operationName, parser };","map":{"version":3,"sources":["parser.js"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from 'ts-invariant';\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\");\n    var fragments = document.definitions.filter(function (x) { return x.kind === 'FragmentDefinition'; });\n    var queries = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'query';\n    });\n    var mutations = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n    });\n    var subscriptions = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n    });\n    invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\");\n    invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") +\n        (\"subscriptions and \" + mutations.length + \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\");\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" +\n        (definitions.length + \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\");\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}