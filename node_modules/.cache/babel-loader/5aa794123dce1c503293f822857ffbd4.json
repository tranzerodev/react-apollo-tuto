{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { NetworkStatus } from './networkStatus.js';\n\nvar Reobserver = function () {\n  function Reobserver(observer, options, fetch, shouldFetch) {\n    this.observer = observer;\n    this.options = options;\n    this.fetch = fetch;\n    this.shouldFetch = shouldFetch;\n  }\n\n  Reobserver.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    if (newOptions) {\n      this.updateOptions(newOptions);\n    } else {\n      this.updatePolling();\n    }\n\n    var concast = this.fetch(this.options, newNetworkStatus);\n\n    if (this.concast) {\n      this.concast.removeObserver(this.observer, true);\n    }\n\n    concast.addObserver(this.observer);\n    return (this.concast = concast).promise;\n  };\n\n  Reobserver.prototype.updateOptions = function (newOptions) {\n    var _this = this;\n\n    Object.keys(newOptions).forEach(function (key) {\n      var value = newOptions[key];\n\n      if (value !== void 0) {\n        _this.options[key] = value;\n      }\n    });\n    this.updatePolling();\n    return this;\n  };\n\n  Reobserver.prototype.stop = function () {\n    if (this.concast) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n    }\n\n    if (this.pollingInfo) {\n      clearTimeout(this.pollingInfo.timeout);\n      this.options.pollInterval = 0;\n      this.updatePolling();\n    }\n  };\n\n  Reobserver.prototype.updatePolling = function () {\n    var _this = this;\n\n    var _a = this,\n        pollingInfo = _a.pollingInfo,\n        pollInterval = _a.options.pollInterval;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 23) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n\n    if (this.shouldFetch === false) {\n      return;\n    }\n\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (_this.shouldFetch && _this.shouldFetch()) {\n          _this.reobserve({\n            fetchPolicy: \"network-only\"\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    var poll = function () {\n      var info = _this.pollingInfo;\n\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  };\n\n  return Reobserver;\n}();\n\nexport { Reobserver };","map":{"version":3,"sources":["Reobserver.js"],"names":[],"mappings":"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","sourcesContent":["import { NetworkStatus } from './networkStatus';\nimport { invariant } from 'ts-invariant';\nvar Reobserver = (function () {\n    function Reobserver(observer, options, fetch, shouldFetch) {\n        this.observer = observer;\n        this.options = options;\n        this.fetch = fetch;\n        this.shouldFetch = shouldFetch;\n    }\n    Reobserver.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        if (newOptions) {\n            this.updateOptions(newOptions);\n        }\n        else {\n            this.updatePolling();\n        }\n        var concast = this.fetch(this.options, newNetworkStatus);\n        if (this.concast) {\n            this.concast.removeObserver(this.observer, true);\n        }\n        concast.addObserver(this.observer);\n        return (this.concast = concast).promise;\n    };\n    Reobserver.prototype.updateOptions = function (newOptions) {\n        var _this = this;\n        Object.keys(newOptions).forEach(function (key) {\n            var value = newOptions[key];\n            if (value !== void 0) {\n                _this.options[key] = value;\n            }\n        });\n        this.updatePolling();\n        return this;\n    };\n    Reobserver.prototype.stop = function () {\n        if (this.concast) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n        }\n        if (this.pollingInfo) {\n            clearTimeout(this.pollingInfo.timeout);\n            this.options.pollInterval = 0;\n            this.updatePolling();\n        }\n    };\n    Reobserver.prototype.updatePolling = function () {\n        var _this = this;\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo &&\n            pollingInfo.interval === pollInterval) {\n            return;\n        }\n        invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (this.shouldFetch === false) {\n            return;\n        }\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function () {\n            if (_this.pollingInfo) {\n                if (_this.shouldFetch && _this.shouldFetch()) {\n                    _this.reobserve({\n                        fetchPolicy: \"network-only\",\n                    }, NetworkStatus.poll).then(poll, poll);\n                }\n                else {\n                    poll();\n                }\n            }\n            ;\n        };\n        var poll = function () {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    return Reobserver;\n}());\nexport { Reobserver };\n//# sourceMappingURL=Reobserver.js.map"]},"metadata":{},"sourceType":"module"}