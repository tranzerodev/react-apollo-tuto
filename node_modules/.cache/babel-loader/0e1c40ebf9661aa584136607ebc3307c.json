{"ast":null,"code":"import { __spreadArrays, __assign } from 'tslib';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction mergeDeep() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return mergeDeepArray(sources);\n}\n\nfunction mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n\n  if (count > 1) {\n    var merger = new DeepMerger();\n\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n\n  return target;\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\nvar defaultReconciler = function (target, source, property) {\n  return this.merge(target[property], source[property]);\n};\n\nvar DeepMerger = function () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n\n    this.reconciler = reconciler;\n    this.isObject = isObject;\n    this.pastCopies = new Set();\n  }\n\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n\n    var context = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n\n    if (isObject(source) && isObject(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, __spreadArrays([target, source, sourceKey], context));\n\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    }\n\n    return source;\n  };\n\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if (isObject(value) && !this.pastCopies.has(value)) {\n      if (Array.isArray(value)) {\n        value = value.slice(0);\n      } else {\n        value = __assign({\n          __proto__: Object.getPrototypeOf(value)\n        }, value);\n      }\n\n      this.pastCopies.add(value);\n    }\n\n    return value;\n  };\n\n  return DeepMerger;\n}();\n\nexport { DeepMerger, mergeDeep, mergeDeepArray };","map":{"version":3,"sources":["mergeDeep.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nexport function mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for (var i = 1; i < count; ++i) {\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nvar defaultReconciler = function (target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = (function () {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) { reconciler = defaultReconciler; }\n        this.reconciler = reconciler;\n        this.isObject = isObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function (target, source) {\n        var _this = this;\n        var context = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            context[_i - 2] = arguments[_i];\n        }\n        if (isObject(source) && isObject(target)) {\n            Object.keys(source).forEach(function (sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, __spreadArrays([target, source, sourceKey], context));\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                }\n                else {\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function (value) {\n        if (isObject(value) && !this.pastCopies.has(value)) {\n            if (Array.isArray(value)) {\n                value = value.slice(0);\n            }\n            else {\n                value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n            }\n            this.pastCopies.add(value);\n        }\n        return value;\n    };\n    return DeepMerger;\n}());\nexport { DeepMerger };\n//# sourceMappingURL=mergeDeep.js.map"]},"metadata":{},"sourceType":"module"}