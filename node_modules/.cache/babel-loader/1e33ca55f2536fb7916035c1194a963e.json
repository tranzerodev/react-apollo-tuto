{"ast":null,"code":"import { __awaiter, __generator, __assign } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { getDefaultValues, getOperationDefinition, getOperationName } from '../utilities/graphql/getFromAST.js';\nimport { execute } from '../link/core/execute.js';\nimport { equal } from '@wry/equality';\nimport { hasClientExports } from '../utilities/graphql/directives.js';\nimport { graphQLResultHasError, tryFunctionOrLogError } from '../utilities/common/errorHandling.js';\nimport { removeConnectionDirectiveFromDocument } from '../utilities/graphql/transform.js';\nimport { canUseWeakMap } from '../utilities/common/canUse.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { ApolloError, isApolloError } from '../errors/ApolloError.js';\nimport { MutationStore } from '../data/mutations.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { ObservableQuery } from './ObservableQuery.js';\nimport { LocalState } from './LocalState.js';\nimport { asyncMap } from '../utilities/observables/asyncMap.js';\nimport { Concast } from '../utilities/observables/Concast.js';\nimport { QueryInfo } from './QueryInfo.js';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        _c = _a.onBroadcast,\n        onBroadcast = _c === void 0 ? function () {\n      return undefined;\n    } : _c,\n        _d = _a.ssrMode,\n        ssrMode = _d === void 0 ? false : _d,\n        _e = _a.clientAwareness,\n        clientAwareness = _e === void 0 ? {} : _e,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.mutationStore = new MutationStore();\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(14) : new InvariantError('QueryManager stopped while query was in flight'));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueriesByName = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        fetchPolicy = _a.fetchPolicy,\n        _e = _a.context,\n        context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, generateUpdateQueriesInfo, optimistic_1, self;\n\n      var _this = this;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation, 15) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 16) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n            mutationId = this.generateMutationId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n\n          case 2:\n            generateUpdateQueriesInfo = function () {\n              var ret = {};\n\n              if (updateQueriesByName) {\n                _this.queries.forEach(function (_a, queryId) {\n                  var observableQuery = _a.observableQuery;\n\n                  if (observableQuery) {\n                    var queryName = observableQuery.queryName;\n\n                    if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {\n                      ret[queryId] = {\n                        updater: updateQueriesByName[queryName],\n                        queryInfo: _this.queries.get(queryId)\n                      };\n                    }\n                  }\n                });\n              }\n\n              return ret;\n            };\n\n            this.mutationStore.initMutation(mutationId, mutation, variables);\n\n            if (optimisticResponse) {\n              optimistic_1 = typeof optimisticResponse === 'function' ? optimisticResponse(variables) : optimisticResponse;\n              this.cache.recordOptimisticTransaction(function (cache) {\n                markMutationResult({\n                  mutationId: mutationId,\n                  result: {\n                    data: optimistic_1\n                  },\n                  document: mutation,\n                  variables: variables,\n                  queryUpdatersById: generateUpdateQueriesInfo(),\n                  update: updateWithProxyFn\n                }, cache);\n              }, mutationId);\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n              self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false).subscribe({\n                next: function (result) {\n                  if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                    error = new ApolloError({\n                      graphQLErrors: result.errors\n                    });\n                    return;\n                  }\n\n                  self.mutationStore.markMutationResult(mutationId);\n\n                  if (fetchPolicy !== 'no-cache') {\n                    try {\n                      markMutationResult({\n                        mutationId: mutationId,\n                        result: result,\n                        document: mutation,\n                        variables: variables,\n                        queryUpdatersById: generateUpdateQueriesInfo(),\n                        update: updateWithProxyFn\n                      }, self.cache);\n                    } catch (e) {\n                      error = new ApolloError({\n                        networkError: e\n                      });\n                      return;\n                    }\n                  }\n\n                  storeResult = result;\n                },\n                error: function (err) {\n                  self.mutationStore.markMutationError(mutationId, err);\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function () {\n                  if (error) {\n                    self.mutationStore.markMutationError(mutationId, error);\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n\n                  if (error) {\n                    reject(error);\n                    return;\n                  }\n\n                  if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                  }\n\n                  var refetchQueryPromises = [];\n\n                  if (isNonEmptyArray(refetchQueries)) {\n                    refetchQueries.forEach(function (refetchQuery) {\n                      if (typeof refetchQuery === 'string') {\n                        self.queries.forEach(function (_a) {\n                          var observableQuery = _a.observableQuery;\n\n                          if (observableQuery && observableQuery.queryName === refetchQuery) {\n                            refetchQueryPromises.push(observableQuery.refetch());\n                          }\n                        });\n                      } else {\n                        var queryOptions = {\n                          query: refetchQuery.query,\n                          variables: refetchQuery.variables,\n                          fetchPolicy: 'network-only'\n                        };\n\n                        if (refetchQuery.context) {\n                          queryOptions.context = refetchQuery.context;\n                        }\n\n                        refetchQueryPromises.push(self.query(queryOptions));\n                      }\n                    });\n                  }\n\n                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                      delete storeResult.errors;\n                    }\n\n                    resolve(storeResult);\n                  });\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.getQueryStoreValue = function (queryId) {\n    return queryId ? this.queries.get(queryId) : undefined;\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed))\n      };\n\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var observable = new ObservableQuery({\n      queryManager: this,\n      options: options\n    });\n    this.getQuery(observable.queryId).init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n\n    process.env.NODE_ENV === \"production\" ? invariant(options.query, 17) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 18) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 19) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 20) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    var queryId = this.generateQueryId();\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.getQuery(queryId).listeners.add(listener);\n  };\n\n  QueryManager.prototype.clearStore = function () {\n    this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(21) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    this.mutationStore.reset();\n    return this.cache.reset();\n  };\n\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n\n      if (observableQuery) {\n        var fetchPolicy = observableQuery.options.fetchPolicy;\n        observableQuery.resetLastResults();\n\n        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n\n        _this.getQuery(queryId).setDiff(null);\n      }\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        variables = _a.variables;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          if (!graphQLResultHasError(result)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    if (deduplication === void 0) {\n      deduplication = this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _a = this,\n          inFlightLinkObservables_1 = _a.inFlightLinkObservables,\n          link = _a.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = JSON.stringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.cleanup(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {\n    var lastRequestId = queryInfo.lastRequestId;\n    return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n      var hasErrors = isNonEmptyArray(result.errors);\n\n      if (lastRequestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        queryInfo.markResult(result, options, allowCacheWrite);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: queryInfo.networkStatus || NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = result.errors;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (lastRequestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var oldNetworkStatus = queryInfo.networkStatus;\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n      options.fetchPolicy = \"cache-first\";\n    }\n\n    var mightUseNetwork = fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\";\n\n    if (mightUseNetwork && notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus)) {\n      if (fetchPolicy !== \"cache-first\") {\n        fetchPolicy = \"cache-and-network\";\n      }\n\n      returnPartialData = true;\n    }\n\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      Promise.resolve().then(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.cleanup(function () {\n      return _this.fetchCancelFns.delete(queryId);\n    });\n    return concast;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {\n    var _this = this;\n\n    var query = options.query,\n        variables = options.variables,\n        fetchPolicy = options.fetchPolicy,\n        errorPolicy = options.errorPolicy,\n        returnPartialData = options.returnPartialData,\n        context = options.context;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      lastRequestId: this.generateRequestId(),\n      networkStatus: networkStatus\n    }).updateWatch(variables);\n\n    var readCache = function () {\n      return _this.cache.diff({\n        query: query,\n        variables: variables,\n        returnPartialData: true,\n        optimistic: true\n      });\n    };\n\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (process.env.NODE_ENV !== 'production' && isNonEmptyArray(diff.missing) && !equal(data, {})) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) {\n          return m.path.join('.');\n        }).join(', '), diff.missing);\n      }\n\n      var fromData = function (data) {\n        return Observable.of({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        });\n      };\n\n      if (_this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data);\n        });\n      }\n\n      return fromData(data);\n    };\n\n    var resultsFromLink = function (allowCacheWrite) {\n      return _this.getResultsFromLink(queryInfo, allowCacheWrite, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n\n          if (diff.optimistic) {\n            return returnPartialData ? [resultsFromCache(diff, queryInfo.markReady())] : [];\n          }\n\n          if (returnPartialData) {\n            return [resultsFromCache(diff), resultsFromLink(true)];\n          }\n\n          return [resultsFromLink(true)];\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData) {\n            return [resultsFromCache(diff), resultsFromLink(true)];\n          }\n\n          return [resultsFromLink(true)];\n        }\n\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n\n      case \"network-only\":\n        return [resultsFromLink(true)];\n\n      case \"no-cache\":\n        return [resultsFromLink(false)];\n\n      case \"standby\":\n        return [];\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this.cache));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  QueryManager.prototype.checkInFlight = function (queryId) {\n    var query = this.getQueryStoreValue(queryId);\n    return !!query && !!query.networkStatus && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n\n  return QueryManager;\n}();\n\nfunction markMutationResult(mutation, cache) {\n  if (!graphQLResultHasError(mutation.result)) {\n    var cacheWrites_1 = [{\n      result: mutation.result.data,\n      dataId: 'ROOT_MUTATION',\n      query: mutation.document,\n      variables: mutation.variables\n    }];\n    var queryUpdatersById_1 = mutation.queryUpdatersById;\n\n    if (queryUpdatersById_1) {\n      Object.keys(queryUpdatersById_1).forEach(function (id) {\n        var _a = queryUpdatersById_1[id],\n            updater = _a.updater,\n            _b = _a.queryInfo,\n            document = _b.document,\n            variables = _b.variables;\n\n        var _c = cache.diff({\n          query: document,\n          variables: variables,\n          returnPartialData: true,\n          optimistic: false\n        }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n\n        if (complete && currentQueryResult) {\n          var nextQueryResult = tryFunctionOrLogError(function () {\n            return updater(currentQueryResult, {\n              mutationResult: mutation.result,\n              queryName: getOperationName(document) || undefined,\n              queryVariables: variables\n            });\n          });\n\n          if (nextQueryResult) {\n            cacheWrites_1.push({\n              result: nextQueryResult,\n              dataId: 'ROOT_QUERY',\n              query: document,\n              variables: variables\n            });\n          }\n        }\n      });\n    }\n\n    cache.performTransaction(function (c) {\n      cacheWrites_1.forEach(function (write) {\n        return c.write(write);\n      });\n      var update = mutation.update;\n\n      if (update) {\n        tryFunctionOrLogError(function () {\n          return update(c, mutation.result);\n        });\n      }\n    });\n  }\n}\n\nexport { QueryManager };","map":{"version":3,"sources":["QueryManager.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { execute } from '../link/core/execute';\nimport { getDefaultValues, getOperationDefinition, getOperationName, } from '../utilities/graphql/getFromAST';\nimport { hasClientExports, } from '../utilities/graphql/directives';\nimport { graphQLResultHasError, tryFunctionOrLogError, } from '../utilities/common/errorHandling';\nimport { removeConnectionDirectiveFromDocument } from '../utilities/graphql/transform';\nimport { canUseWeakMap } from '../utilities/common/canUse';\nimport { ApolloError, isApolloError } from '../errors/ApolloError';\nimport { Observable, } from '../utilities/observables/Observable';\nimport { MutationStore } from '../data/mutations';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { LocalState } from './LocalState';\nimport { asyncMap } from '../utilities/observables/asyncMap';\nimport { Concast, } from '../utilities/observables/Concast';\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nimport { QueryInfo } from './QueryInfo';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(new InvariantError('QueryManager stopped while query was in flight'));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, optimistic_1, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n                        mutationId = this.generateMutationId();\n                        mutation = this.transform(mutation).document;\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                queryInfo: _this.queries.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        if (optimisticResponse) {\n                            optimistic_1 = typeof optimisticResponse === 'function'\n                                ? optimisticResponse(variables)\n                                : optimisticResponse;\n                            this.cache.recordOptimisticTransaction(function (cache) {\n                                markMutationResult({\n                                    mutationId: mutationId,\n                                    result: { data: optimistic_1 },\n                                    document: mutation,\n                                    variables: variables,\n                                    queryUpdatersById: generateUpdateQueriesInfo(),\n                                    update: updateWithProxyFn,\n                                }, cache);\n                            }, mutationId);\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            try {\n                                                markMutationResult({\n                                                    mutationId: mutationId,\n                                                    result: result,\n                                                    document: mutation,\n                                                    variables: variables,\n                                                    queryUpdatersById: generateUpdateQueriesInfo(),\n                                                    update: updateWithProxyFn,\n                                                }, self.cache);\n                                            }\n                                            catch (e) {\n                                                error = new ApolloError({\n                                                    networkError: e,\n                                                });\n                                                return;\n                                            }\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        });\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.getQueryStoreValue = function (queryId) {\n        return queryId ? this.queries.get(queryId) : undefined;\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = forLink && this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var observable = new ObservableQuery({\n            queryManager: this,\n            options: options,\n        });\n        this.getQuery(observable.queryId).init({\n            document: options.query,\n            observableQuery: observable,\n            variables: options.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        var queryId = this.generateQueryId();\n        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.getQuery(queryId).listeners.add(listener);\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.cancelPendingFetches(new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        this.mutationStore.reset();\n        return this.cache.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.getQuery(queryId).setDiff(null);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    if (!graphQLResultHasError(result)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        if (deduplication === void 0) { deduplication = this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _a = this, inFlightLinkObservables_1 = _a.inFlightLinkObservables, link = _a.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.cleanup(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {\n        var lastRequestId = queryInfo.lastRequestId;\n        return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n            var hasErrors = isNonEmptyArray(result.errors);\n            if (lastRequestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                queryInfo.markResult(result, options, allowCacheWrite);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = result.errors;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (lastRequestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = this.transform(options.query).document;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var oldNetworkStatus = queryInfo.networkStatus;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        if (fetchPolicy === \"cache-and-network\" ||\n            fetchPolicy === \"network-only\") {\n            options.fetchPolicy = \"cache-first\";\n        }\n        var mightUseNetwork = fetchPolicy === \"cache-first\" ||\n            fetchPolicy === \"cache-and-network\" ||\n            fetchPolicy === \"network-only\" ||\n            fetchPolicy === \"no-cache\";\n        if (mightUseNetwork &&\n            notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus)) {\n            if (fetchPolicy !== \"cache-first\") {\n                fetchPolicy = \"cache-and-network\";\n            }\n            returnPartialData = true;\n        }\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n        };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            Promise.resolve().then(function () { return concast.cancel(reason); });\n        });\n        var concast = new Concast(this.transform(normalized.query).hasClientExports\n            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)\n            : fromVariables(normalized.variables));\n        concast.cleanup(function () { return _this.fetchCancelFns.delete(queryId); });\n        return concast;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {\n        var _this = this;\n        var query = options.query, variables = options.variables, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, returnPartialData = options.returnPartialData, context = options.context;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            lastRequestId: this.generateRequestId(),\n            networkStatus: networkStatus,\n        }).updateWatch(variables);\n        var readCache = function () { return _this.cache.diff({\n            query: query,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n        }); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (process.env.NODE_ENV !== 'production' &&\n                isNonEmptyArray(diff.missing) &&\n                !equal(data, {})) {\n                invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) { return m.path.join('.'); }).join(', '), diff.missing);\n            }\n            var fromData = function (data) { return Observable.of({\n                data: data,\n                loading: isNetworkRequestInFlight(networkStatus),\n                networkStatus: networkStatus,\n            }); };\n            if (_this.transform(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data); });\n            }\n            return fromData(data);\n        };\n        var resultsFromLink = function (allowCacheWrite) {\n            return _this.getResultsFromLink(queryInfo, allowCacheWrite, {\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ];\n                }\n                if (diff.optimistic) {\n                    return returnPartialData ? [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ] : [];\n                }\n                if (returnPartialData) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(true),\n                    ];\n                }\n                return [\n                    resultsFromLink(true),\n                ];\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(true),\n                    ];\n                }\n                return [\n                    resultsFromLink(true),\n                ];\n            }\n            case \"cache-only\":\n                return [\n                    resultsFromCache(readCache(), queryInfo.markReady()),\n                ];\n            case \"network-only\":\n                return [resultsFromLink(true)];\n            case \"no-cache\":\n                return [resultsFromLink(false)];\n            case \"standby\":\n                return [];\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this.cache));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.getQueryStoreValue(queryId);\n        return (!!query &&\n            !!query.networkStatus &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\nfunction markMutationResult(mutation, cache) {\n    if (!graphQLResultHasError(mutation.result)) {\n        var cacheWrites_1 = [{\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            }];\n        var queryUpdatersById_1 = mutation.queryUpdatersById;\n        if (queryUpdatersById_1) {\n            Object.keys(queryUpdatersById_1).forEach(function (id) {\n                var _a = queryUpdatersById_1[id], updater = _a.updater, _b = _a.queryInfo, document = _b.document, variables = _b.variables;\n                var _c = cache.diff({\n                    query: document,\n                    variables: variables,\n                    returnPartialData: true,\n                    optimistic: false,\n                }), currentQueryResult = _c.result, complete = _c.complete;\n                if (complete && currentQueryResult) {\n                    var nextQueryResult = tryFunctionOrLogError(function () { return updater(currentQueryResult, {\n                        mutationResult: mutation.result,\n                        queryName: getOperationName(document) || undefined,\n                        queryVariables: variables,\n                    }); });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: document,\n                            variables: variables,\n                        });\n                    }\n                }\n            });\n        }\n        cache.performTransaction(function (c) {\n            cacheWrites_1.forEach(function (write) { return c.write(write); });\n            var update = mutation.update;\n            if (update) {\n                tryFunctionOrLogError(function () { return update(c, mutation.result); });\n            }\n        });\n    }\n}\n//# sourceMappingURL=QueryManager.js.map"]},"metadata":{},"sourceType":"module"}