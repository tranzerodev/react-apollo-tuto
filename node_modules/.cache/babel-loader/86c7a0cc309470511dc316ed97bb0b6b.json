{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { equal } from '@wry/equality';\nimport { OperationData } from './OperationData.js';\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nexport { SubscriptionData };","map":{"version":3,"sources":["SubscriptionData.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { OperationData } from './OperationData';\nvar SubscriptionData = (function (_super) {\n    __extends(SubscriptionData, _super);\n    function SubscriptionData(_a) {\n        var options = _a.options, context = _a.context, setResult = _a.setResult;\n        var _this = _super.call(this, options, context) || this;\n        _this.currentObservable = {};\n        _this.setResult = setResult;\n        _this.initialize(options);\n        return _this;\n    }\n    SubscriptionData.prototype.execute = function (result) {\n        if (this.getOptions().skip === true) {\n            this.cleanup();\n            return {\n                loading: false,\n                error: undefined,\n                data: undefined,\n                variables: this.getOptions().variables\n            };\n        }\n        var currentResult = result;\n        if (this.refreshClient().isNew) {\n            currentResult = this.getLoadingResult();\n        }\n        var shouldResubscribe = this.getOptions().shouldResubscribe;\n        if (typeof shouldResubscribe === 'function') {\n            shouldResubscribe = !!shouldResubscribe(this.getOptions());\n        }\n        if (shouldResubscribe !== false &&\n            this.previousOptions &&\n            Object.keys(this.previousOptions).length > 0 &&\n            (this.previousOptions.subscription !== this.getOptions().subscription ||\n                !equal(this.previousOptions.variables, this.getOptions().variables) ||\n                this.previousOptions.skip !== this.getOptions().skip)) {\n            this.cleanup();\n            currentResult = this.getLoadingResult();\n        }\n        this.initialize(this.getOptions());\n        this.startSubscription();\n        this.previousOptions = this.getOptions();\n        return __assign(__assign({}, currentResult), { variables: this.getOptions().variables });\n    };\n    SubscriptionData.prototype.afterExecute = function () {\n        this.isMounted = true;\n    };\n    SubscriptionData.prototype.cleanup = function () {\n        this.endSubscription();\n        delete this.currentObservable.query;\n    };\n    SubscriptionData.prototype.initialize = function (options) {\n        if (this.currentObservable.query || this.getOptions().skip === true)\n            return;\n        this.currentObservable.query = this.refreshClient().client.subscribe({\n            query: options.subscription,\n            variables: options.variables,\n            fetchPolicy: options.fetchPolicy\n        });\n    };\n    SubscriptionData.prototype.startSubscription = function () {\n        if (this.currentObservable.subscription)\n            return;\n        this.currentObservable.subscription = this.currentObservable.query.subscribe({\n            next: this.updateCurrentData.bind(this),\n            error: this.updateError.bind(this),\n            complete: this.completeSubscription.bind(this)\n        });\n    };\n    SubscriptionData.prototype.getLoadingResult = function () {\n        return {\n            loading: true,\n            error: undefined,\n            data: undefined\n        };\n    };\n    SubscriptionData.prototype.updateResult = function (result) {\n        if (this.isMounted) {\n            this.setResult(result);\n        }\n    };\n    SubscriptionData.prototype.updateCurrentData = function (result) {\n        var onSubscriptionData = this.getOptions().onSubscriptionData;\n        this.updateResult({\n            data: result.data,\n            loading: false,\n            error: undefined\n        });\n        if (onSubscriptionData) {\n            onSubscriptionData({\n                client: this.refreshClient().client,\n                subscriptionData: result\n            });\n        }\n    };\n    SubscriptionData.prototype.updateError = function (error) {\n        this.updateResult({\n            error: error,\n            loading: false\n        });\n    };\n    SubscriptionData.prototype.completeSubscription = function () {\n        var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n        if (onSubscriptionComplete)\n            onSubscriptionComplete();\n        this.endSubscription();\n    };\n    SubscriptionData.prototype.endSubscription = function () {\n        if (this.currentObservable.subscription) {\n            this.currentObservable.subscription.unsubscribe();\n            delete this.currentObservable.subscription;\n        }\n    };\n    return SubscriptionData;\n}(OperationData));\nexport { SubscriptionData };\n//# sourceMappingURL=SubscriptionData.js.map"]},"metadata":{},"sourceType":"module"}